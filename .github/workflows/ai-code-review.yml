name: AI Code Review (Built-in Token)

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  ai-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR Changes
        id: changes
        run: |
          # Get the diff
          git fetch origin ${{ github.event.pull_request.base.ref }}
          DIFF=$(git diff origin/${{ github.event.pull_request.base.ref }}..HEAD)

          # Limit size for API (2000 chars)
          DIFF_LIMITED=$(echo "$DIFF" | head -c 2000)

          # Save diff to output
          {
            echo "diff<<DIFF_EOF"
            echo "$DIFF_LIMITED"
            echo "DIFF_EOF"
          } >> $GITHUB_OUTPUT

          # Get changed files list
          CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}..HEAD | head -10)
          {
            echo "files<<FILES_EOF"
            echo "$CHANGED_FILES"
            echo "FILES_EOF"
          } >> $GITHUB_OUTPUT

      - name: Try GitHub Models API
        id: github_models
        continue-on-error: true
        run: |
          DIFF_CONTENT="${{ steps.changes.outputs.diff }}"

          # Escape content for JSON
          DIFF_JSON=$(echo "$DIFF_CONTENT" | jq -R -s .)

          # Try calling GitHub Models API
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"messages\": [
                {
                  \"role\": \"system\",
                  \"content\": \"You are a code reviewer. Analyze this diff and provide concise feedback on bugs, security, and improvements.\"
                },
                {
                  \"role\": \"user\",
                  \"content\": $DIFF_JSON
                }
              ],
              \"model\": \"gpt-4o-mini\",
              \"max_tokens\": 800
            }" \
            "https://models.inference.ai.azure.com/chat/completions")

          # Check if API call worked
          if echo "$RESPONSE" | jq -e '.choices[0].message.content' >/dev/null 2>&1; then
            AI_RESPONSE=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
            {
              echo "review<<REVIEW_EOF"
              echo "$AI_RESPONSE"
              echo "REVIEW_EOF"
            } >> $GITHUB_OUTPUT
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
          fi

      - name: Basic Analysis (Fallback)
        id: basic_analysis
        if: steps.github_models.outputs.success != 'true'
        run: |
          DIFF="${{ steps.changes.outputs.diff }}"
          FILES="${{ steps.changes.outputs.files }}"

          # Basic pattern matching analysis
          ISSUES=""

          if echo "$DIFF" | grep -i "console\.log\|print(" >/dev/null; then
            ISSUES="$ISSUES\n- üîç **Debug statements found** - Remove console.log/print before production"
          fi

          if echo "$DIFF" | grep -i "todo\|fixme" >/dev/null; then
            ISSUES="$ISSUES\n- ‚ö†Ô∏è **TODO/FIXME comments** - Consider addressing these items"
          fi

          if echo "$DIFF" | grep -i "password\|secret\|key.*=" >/dev/null; then
            ISSUES="$ISSUES\n- üîí **Potential secrets detected** - Ensure no hardcoded credentials"
          fi

          if echo "$FILES" | grep -E "\.(js|ts|jsx|tsx)$" >/dev/null; then
            ISSUES="$ISSUES\n- üü° **JavaScript/TypeScript files** - Run ESLint and check for type safety"
          fi

          if echo "$FILES" | grep -E "\.(py)$" >/dev/null; then
            ISSUES="$ISSUES\n- üêç **Python files** - Ensure PEP 8 compliance and proper error handling"
          fi

          if [ -z "$ISSUES" ]; then
            ISSUES="\n- ‚úÖ No obvious issues detected in this change"
          fi

          {
            echo "fallback_review<<FALLBACK_EOF"
            echo -e "$ISSUES"
            echo "FALLBACK_EOF"
          } >> $GITHUB_OUTPUT

      - name: Post Review Comment
        uses: actions/github-script@v7
        with:
          script: |
            const changedFiles = `${{ steps.changes.outputs.files }}`.split('\n').filter(f => f.trim());
            const success = '${{ steps.github_models.outputs.success }}' === 'true';

            let reviewContent;
            if (success) {
              reviewContent = `${{ steps.github_models.outputs.review }}`;
            } else {
              reviewContent = `${{ steps.basic_analysis.outputs.fallback_review }}`;
            }

            const comment = `## ü§ñ AI Code Review ${success ? '(GitHub Models)' : '(Basic Analysis)'}

            ### Files Changed (${changedFiles.length}):
            ${changedFiles.slice(0, 10).map(f => `- \`${f}\``).join('\n')}
            ${changedFiles.length > 10 ? `\n*...and ${changedFiles.length - 10} more files*` : ''}

            ### Review:
            ${reviewContent}

            ### PR Stats:
            - üìä **Lines added**: +${{ github.event.pull_request.additions }}
            - üìä **Lines removed**: -${{ github.event.pull_request.deletions }}
            - üìÅ **Files changed**: ${{ github.event.pull_request.changed_files }}

            ${success ? '*Powered by GitHub Models API*' : '*Basic pattern analysis - GitHub Models API unavailable*'}`;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
