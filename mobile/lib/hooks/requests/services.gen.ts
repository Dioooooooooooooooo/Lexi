// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type {
  PostAuthRegisterData,
  PostAuthRegisterResponse,
  PostAuthLoginData,
  PostAuthLoginResponse,
  PostAuthGoogleTokenData,
  PostAuthGoogleTokenResponse,
  PostAuthRefreshData,
  PostAuthRefreshResponse,
  PostAuthForgotPasswordData,
  PostAuthForgotPasswordResponse,
  PostAuthResetPasswordData,
  PostAuthResetPasswordResponse,
  PostAuthRequestEmailVerificationResponse,
  GetAuthVerifyEmailData,
  GetAuthVerifyEmailResponse,
  GetAuthMeResponse,
  PatchAuthMeData,
  PatchAuthMeResponse,
  PostAuthChangePasswordData,
  PostAuthChangePasswordResponse,
  PostAuthLogoutData,
  PostAuthLogoutResponse,
  GetAuthVerifyTokenResponse,
  GetAuthProfileResponse,
  GetPupilsMeResponse,
  PatchPupilsMeData,
  PatchPupilsMeResponse,
  GetPupilsByUsernameData,
  GetPupilsByUsernameResponse,
  GetPupilsLeaderboardResponse,
  GetPupilsLeaderboardByPupilIdResponse,
  PostClassroomsData,
  PostClassroomsResponse,
  GetClassroomsResponse,
  PostClassroomsEnrollData,
  PostClassroomsEnrollResponse,
  PostClassroomsUnenrollData,
  PostClassroomsUnenrollResponse,
  PostClassroomsJoinData,
  PostClassroomsJoinResponse,
  PostClassroomsLeaveData,
  PostClassroomsLeaveResponse,
  GetClassroomsByIdData,
  GetClassroomsByIdResponse,
  PatchClassroomsByIdData,
  PatchClassroomsByIdResponse,
  DeleteClassroomsByIdData,
  DeleteClassroomsByIdResponse,
  PostMinigamesWordsFromLettersData,
  PostMinigamesWordsFromLettersResponse,
  PostMinigamesChoicesData,
  PostMinigamesChoicesResponse,
  PostMinigamesSentenceRearrangementData,
  PostMinigamesSentenceRearrangementResponse,
  GetMinigamesReadingmaterialsByReadingMaterialIdRandomData,
  GetMinigamesReadingmaterialsByReadingMaterialIdRandomResponse,
  GetMinigamesByReadingSessionIdRandomData,
  GetMinigamesByReadingSessionIdRandomResponse,
  GetMinigamesByReadingMaterialIdWordsFromLettersData,
  GetMinigamesByReadingMaterialIdWordsFromLettersResponse,
  PostMinigamesByReadingSessionIdCompleteData,
  PostMinigamesByReadingSessionIdCompleteResponse,
  PostMinigamesLogsSentenceRearrangementData,
  PostMinigamesLogsSentenceRearrangementResponse,
  PostMinigamesLogsChoicesData,
  PostMinigamesLogsChoicesResponse,
  PostMinigamesLogsWordsFromLettersData,
  PostMinigamesLogsWordsFromLettersResponse,
  PostReadingSessionsData,
  PostReadingSessionsResponse,
  GetReadingSessionsResponse,
  GetReadingSessionsByIdData,
  GetReadingSessionsByIdResponse,
  PatchReadingSessionsByIdData,
  PatchReadingSessionsByIdResponse,
  DeleteReadingSessionsByIdData,
  DeleteReadingSessionsByIdResponse,
  PostReadingMaterialsData,
  PostReadingMaterialsResponse,
  GetReadingMaterialsResponse,
  GetReadingMaterialsRecommendationsResponse,
  GetReadingMaterialsByIdData,
  GetReadingMaterialsByIdResponse,
  PostGenresData,
  PostGenresResponse,
  GetGenresResponse,
  GetAchievementsResponse,
  PostAchievementsPupilByPupilIdAchievementByAchievementNameData,
  PostAchievementsPupilByPupilIdAchievementByAchievementNameResponse,
  GetAchievementsPupilsByPupilIdData,
  GetAchievementsPupilsByPupilIdResponse,
  DeleteAchievementsPupilsByPupilIdAchievementsByAchievementIdData,
  DeleteAchievementsPupilsByPupilIdAchievementsByAchievementIdResponse,
  DeleteAchievementsByIdData,
  DeleteAchievementsByIdResponse,
  PostClassroomsByClassroomIdActivityData,
  PostClassroomsByClassroomIdActivityResponse,
  GetClassroomsByClassroomIdActivityData,
  GetClassroomsByClassroomIdActivityResponse,
  GetClassroomsByClassroomIdActivityByActivityIdData,
  GetClassroomsByClassroomIdActivityByActivityIdResponse,
  PatchClassroomsByClassroomIdActivityByActivityIdData,
  PatchClassroomsByClassroomIdActivityByActivityIdResponse,
  DeleteClassroomsByClassroomIdActivityByActivityIdData,
  DeleteClassroomsByClassroomIdActivityByActivityIdResponse,
  PutUserMeStreakResponse,
  GetUserMeStreakResponse,
  PostUserMeSessionsResponse,
  GetUserMeSessionsResponse,
  PutUserMeSessionsBySessionIdData,
  PutUserMeSessionsBySessionIdResponse,
  GetUserSearchData,
  GetUserSearchResponse,
  PostClassroomActivityLogsByActivityIdData,
  PostClassroomActivityLogsByActivityIdResponse,
  GetClassroomActivityLogsByActivityIdData,
  GetClassroomActivityLogsByActivityIdResponse,
  GetClassroomActivityLogsByActivityIdClassroomByClassroomIdActivityLogsData,
  GetClassroomActivityLogsByActivityIdClassroomByClassroomIdActivityLogsResponse,
  GetDictionaryDictionaryByWordData,
  GetDictionaryDictionaryByWordResponse,
  PostUploadImageResponse,
} from './types.gen';

export class AuthenticationService {
  /**
   * Register a new user
   * Create a new user account with email and password
   * @param data The data for the request.
   * @param data.requestBody User registration data
   * @returns AuthResponseDto User successfully registered
   * @throws ApiError
   */
  public static postAuthRegister(
    data: PostAuthRegisterData,
  ): CancelablePromise<PostAuthRegisterResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/auth/register',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Invalid input data',
        409: 'User already exists',
      },
    });
  }

  /**
   * User login
   * Authenticate user with email and password
   * @param data The data for the request.
   * @param data.requestBody User login credentials
   * @returns SuccessResponseDto User successfully logged in
   * @throws ApiError
   */
  public static postAuthLogin(
    data: PostAuthLoginData,
  ): CancelablePromise<PostAuthLoginResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/auth/login',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Invalid input data',
        401: 'Invalid credentials',
      },
    });
  }

  /**
   * Exchange Google id_token for app tokens
   * @param data The data for the request.
   * @param data.requestBody
   * @returns SuccessResponseDto
   * @throws ApiError
   */
  public static postAuthGoogleToken(
    data: PostAuthGoogleTokenData,
  ): CancelablePromise<PostAuthGoogleTokenResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/auth/google/token',
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Refresh access token
   * Get a new access token using refresh token
   * @param data The data for the request.
   * @param data.requestBody Refresh token
   * @returns SuccessResponseDto Token refreshed successfully
   * @throws ApiError
   */
  public static postAuthRefresh(
    data: PostAuthRefreshData,
  ): CancelablePromise<PostAuthRefreshResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/auth/refresh',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Invalid refresh token',
      },
    });
  }

  /**
   * Request password reset
   * Send a password reset link to user email
   * @param data The data for the request.
   * @param data.requestBody User email for password reset
   * @returns SuccessResponseDto Password reset email sent (if email exists)
   * @throws ApiError
   */
  public static postAuthForgotPassword(
    data: PostAuthForgotPasswordData,
  ): CancelablePromise<PostAuthForgotPasswordResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/auth/forgot-password',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Invalid input data',
      },
    });
  }

  /**
   * Reset password
   * Reset user password using reset token
   * @param data The data for the request.
   * @param data.requestBody Reset token and new password
   * @returns SuccessResponseDto Password reset successfully
   * @throws ApiError
   */
  public static postAuthResetPassword(
    data: PostAuthResetPasswordData,
  ): CancelablePromise<PostAuthResetPasswordResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/auth/reset-password',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Invalid or expired reset token',
      },
    });
  }

  /**
   * Request email verification
   * Request email verification token
   * @returns SuccessResponseDto Email verication sent.
   * @throws ApiError
   */
  public static postAuthRequestEmailVerification(): CancelablePromise<PostAuthRequestEmailVerificationResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/auth/request-email-verification',
    });
  }

  /**
   * Verify email
   * Verify user email using verification token
   * @param data The data for the request.
   * @param data.token Email verification token
   * @returns SuccessResponseDto Email verified successfully
   * @throws ApiError
   */
  public static getAuthVerifyEmail(
    data: GetAuthVerifyEmailData,
  ): CancelablePromise<GetAuthVerifyEmailResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/auth/verify-email',
      query: {
        token: data.token,
      },
      errors: {
        400: 'Invalid or expired verification token',
      },
    });
  }

  /**
   * Get current user profile
   * Retrieve the authenticated user profile information
   * @returns SuccessResponseDto User profile retrieved successfully
   * @throws ApiError
   */
  public static getAuthMe(): CancelablePromise<GetAuthMeResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/auth/me',
      errors: {
        401: 'Invalid or missing token',
      },
    });
  }

  /**
   * Update user profile
   * Update the authenticated user profile information
   * @param data The data for the request.
   * @param data.requestBody Profile update data
   * @returns SuccessResponseDto Profile updated successfully
   * @throws ApiError
   */
  public static patchAuthMe(
    data: PatchAuthMeData,
  ): CancelablePromise<PatchAuthMeResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/auth/me',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Invalid or missing token',
        409: 'Email already exists',
      },
    });
  }

  /**
   * Change user password
   * Change the authenticated user password
   * @param data The data for the request.
   * @param data.requestBody Current and new password
   * @returns SuccessResponseDto Password changed successfully
   * @throws ApiError
   */
  public static postAuthChangePassword(
    data: PostAuthChangePasswordData,
  ): CancelablePromise<PostAuthChangePasswordResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/auth/change-password',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Invalid or missing token / Current password incorrect',
      },
    });
  }

  /**
   * User logout
   * Logout the authenticated user and optionally revoke refresh token
   * @param data The data for the request.
   * @param data.requestBody Optional refresh token to revoke
   * @returns SuccessResponseDto User successfully logged out
   * @throws ApiError
   */
  public static postAuthLogout(
    data: PostAuthLogoutData = {},
  ): CancelablePromise<PostAuthLogoutResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/auth/logout',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Invalid or missing token',
      },
    });
  }

  /**
   * Verify JWT token
   * Verify if the provided JWT token is valid and return user info
   * @returns unknown Token is valid
   * @throws ApiError
   */
  public static getAuthVerifyToken(): CancelablePromise<GetAuthVerifyTokenResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/auth/verify-token',
      errors: {
        401: 'Invalid or expired token',
      },
    });
  }

  /**
   * @deprecated
   * Get user profile (legacy)
   * Retrieve the authenticated user profile information - use /auth/me instead
   * @returns UserResponseDto User profile retrieved successfully
   * @throws ApiError
   */
  public static getAuthProfile(): CancelablePromise<GetAuthProfileResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/auth/profile',
      errors: {
        401: 'Invalid or missing token',
      },
    });
  }
}

export class PupilsService {
  /**
   * Get user pupil profile
   * @returns SuccessResponseDto Pupil profile successfully fetched
   * @throws ApiError
   */
  public static getPupilsMe(): CancelablePromise<GetPupilsMeResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/pupils/me',
      errors: {
        401: 'Invalid credentials',
      },
    });
  }

  /**
   * Update user pupil profile
   * @param data The data for the request.
   * @param data.requestBody Pupil profile update data
   * @returns SuccessResponseDto Pupil profile successfully updated
   * @throws ApiError
   */
  public static patchPupilsMe(
    data: PatchPupilsMeData,
  ): CancelablePromise<PatchPupilsMeResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/pupils/me',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Invalid credentials',
      },
    });
  }

  /**
   * Get public pupil profile
   * @param data The data for the request.
   * @param data.username
   * @returns SuccessResponseDto Pupil profile successfully fetched
   * @throws ApiError
   */
  public static getPupilsByUsername(
    data: GetPupilsByUsernameData,
  ): CancelablePromise<GetPupilsByUsernameResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/pupils/{username}',
      path: {
        username: data.username,
      },
      errors: {
        401: 'Invalid credentials',
      },
    });
  }

  /**
   * Get global pupil leaderboard
   * @returns SuccessResponseDto Global pupil leaderboard successfully fetched
   * @throws ApiError
   */
  public static getPupilsLeaderboard(): CancelablePromise<GetPupilsLeaderboardResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/pupils/leaderboard',
      errors: {
        401: 'Invalid credentials',
      },
    });
  }

  /**
   * @returns SuccessResponseDto Pupil leaderboard successfully fetched
   * @throws ApiError
   */
  public static getPupilsLeaderboardByPupilId(): CancelablePromise<GetPupilsLeaderboardByPupilIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/pupils/leaderboard/{pupilId}',
      errors: {
        401: 'Invalid credentials',
      },
    });
  }
}

export class ClassroomsService {
  /**
   * Create a classroom
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown
   * @throws ApiError
   */
  public static postClassrooms(
    data: PostClassroomsData,
  ): CancelablePromise<PostClassroomsResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/classrooms',
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Find classrooms
   * @returns unknown
   * @throws ApiError
   */
  public static getClassrooms(): CancelablePromise<GetClassroomsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/classrooms',
    });
  }

  /**
   * Enroll pupils
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown
   * @throws ApiError
   */
  public static postClassroomsEnroll(
    data: PostClassroomsEnrollData,
  ): CancelablePromise<PostClassroomsEnrollResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/classrooms/enroll',
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Unenroll pupils
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown
   * @throws ApiError
   */
  public static postClassroomsUnenroll(
    data: PostClassroomsUnenrollData,
  ): CancelablePromise<PostClassroomsUnenrollResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/classrooms/unenroll',
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Join classroom by code
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown
   * @throws ApiError
   */
  public static postClassroomsJoin(
    data: PostClassroomsJoinData,
  ): CancelablePromise<PostClassroomsJoinResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/classrooms/join',
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Leave classroom
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown
   * @throws ApiError
   */
  public static postClassroomsLeave(
    data: PostClassroomsLeaveData,
  ): CancelablePromise<PostClassroomsLeaveResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/classrooms/leave',
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Find classroom by id
   * @param data The data for the request.
   * @param data.id
   * @returns unknown
   * @throws ApiError
   */
  public static getClassroomsById(
    data: GetClassroomsByIdData,
  ): CancelablePromise<GetClassroomsByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/classrooms/{id}',
      path: {
        id: data.id,
      },
    });
  }

  /**
   * Update classroom by id
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns unknown
   * @throws ApiError
   */
  public static patchClassroomsById(
    data: PatchClassroomsByIdData,
  ): CancelablePromise<PatchClassroomsByIdResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/classrooms/{id}',
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Delete classroom by id
   * @param data The data for the request.
   * @param data.id
   * @returns unknown
   * @throws ApiError
   */
  public static deleteClassroomsById(
    data: DeleteClassroomsByIdData,
  ): CancelablePromise<DeleteClassroomsByIdResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/classrooms/{id}',
      path: {
        id: data.id,
      },
    });
  }
}

export class MinigamesService {
  /**
   * Create WFL minigame
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown
   * @throws ApiError
   */
  public static postMinigamesWordsFromLetters(
    data: PostMinigamesWordsFromLettersData,
  ): CancelablePromise<PostMinigamesWordsFromLettersResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/minigames/wordsFromLetters',
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Create Choices minigame
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown
   * @throws ApiError
   */
  public static postMinigamesChoices(
    data: PostMinigamesChoicesData,
  ): CancelablePromise<PostMinigamesChoicesResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/minigames/choices',
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Create SR minigame
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown
   * @throws ApiError
   */
  public static postMinigamesSentenceRearrangement(
    data: PostMinigamesSentenceRearrangementData,
  ): CancelablePromise<PostMinigamesSentenceRearrangementResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/minigames/sentenceRearrangement',
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Get 3 random minigames for a specific reading material
   * @param data The data for the request.
   * @param data.readingMaterialId
   * @returns unknown
   * @throws ApiError
   */
  public static getMinigamesReadingmaterialsByReadingMaterialIdRandom(
    data: GetMinigamesReadingmaterialsByReadingMaterialIdRandomData,
  ): CancelablePromise<GetMinigamesReadingmaterialsByReadingMaterialIdRandomResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/minigames/readingmaterials/{readingMaterialID}/random',
      path: {
        readingMaterialID: data.readingMaterialId,
      },
    });
  }

  /**
   * Get 3 random minigames for a specific reading session
   * @param data The data for the request.
   * @param data.readingSessionId
   * @returns unknown
   * @throws ApiError
   */
  public static getMinigamesByReadingSessionIdRandom(
    data: GetMinigamesByReadingSessionIdRandomData,
  ): CancelablePromise<GetMinigamesByReadingSessionIdRandomResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/minigames/{readingSessionID}/random',
      path: {
        readingSessionID: data.readingSessionId,
      },
    });
  }

  /**
   * Get WordsFromLetters minigame for a specific reading material
   * @param data The data for the request.
   * @param data.readingMaterialId
   * @returns unknown
   * @throws ApiError
   */
  public static getMinigamesByReadingMaterialIdWordsFromLetters(
    data: GetMinigamesByReadingMaterialIdWordsFromLettersData,
  ): CancelablePromise<GetMinigamesByReadingMaterialIdWordsFromLettersResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/minigames/{readingMaterialID}/wordsFromLetters',
      path: {
        readingMaterialID: data.readingMaterialId,
      },
    });
  }

  /**
   * Create a completion status of minigames for a specific reading session
   * @param data The data for the request.
   * @param data.readingSessionId
   * @returns unknown
   * @throws ApiError
   */
  public static postMinigamesByReadingSessionIdComplete(
    data: PostMinigamesByReadingSessionIdCompleteData,
  ): CancelablePromise<PostMinigamesByReadingSessionIdCompleteResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/minigames/{readingSessionID}/complete',
      path: {
        readingSessionID: data.readingSessionId,
      },
    });
  }

  /**
   * Create a log for SentenceRearrangement minigame
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown
   * @throws ApiError
   */
  public static postMinigamesLogsSentenceRearrangement(
    data: PostMinigamesLogsSentenceRearrangementData,
  ): CancelablePromise<PostMinigamesLogsSentenceRearrangementResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/minigames/logs/SentenceRearrangement',
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Create a log for Choices minigame
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown
   * @throws ApiError
   */
  public static postMinigamesLogsChoices(
    data: PostMinigamesLogsChoicesData,
  ): CancelablePromise<PostMinigamesLogsChoicesResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/minigames/logs/Choices',
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Create a log for WordsFromLetters minigame
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown
   * @throws ApiError
   */
  public static postMinigamesLogsWordsFromLetters(
    data: PostMinigamesLogsWordsFromLettersData,
  ): CancelablePromise<PostMinigamesLogsWordsFromLettersResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/minigames/logs/WordsFromLetters',
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }
}

export class ReadingSessionsService {
  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown
   * @throws ApiError
   */
  public static postReadingSessions(
    data: PostReadingSessionsData,
  ): CancelablePromise<PostReadingSessionsResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/reading-sessions',
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * @returns unknown
   * @throws ApiError
   */
  public static getReadingSessions(): CancelablePromise<GetReadingSessionsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/reading-sessions',
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns unknown
   * @throws ApiError
   */
  public static getReadingSessionsById(
    data: GetReadingSessionsByIdData,
  ): CancelablePromise<GetReadingSessionsByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/reading-sessions/{id}',
      path: {
        id: data.id,
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns unknown
   * @throws ApiError
   */
  public static patchReadingSessionsById(
    data: PatchReadingSessionsByIdData,
  ): CancelablePromise<PatchReadingSessionsByIdResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/reading-sessions/{id}',
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns unknown
   * @throws ApiError
   */
  public static deleteReadingSessionsById(
    data: DeleteReadingSessionsByIdData,
  ): CancelablePromise<DeleteReadingSessionsByIdResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/reading-sessions/{id}',
      path: {
        id: data.id,
      },
    });
  }
}

export class ReadingMaterialsService {
  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown
   * @throws ApiError
   */
  public static postReadingMaterials(
    data: PostReadingMaterialsData,
  ): CancelablePromise<PostReadingMaterialsResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/reading-materials',
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * @returns unknown
   * @throws ApiError
   */
  public static getReadingMaterials(): CancelablePromise<GetReadingMaterialsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/reading-materials',
    });
  }

  /**
   * @returns unknown
   * @throws ApiError
   */
  public static getReadingMaterialsRecommendations(): CancelablePromise<GetReadingMaterialsRecommendationsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/reading-materials/recommendations',
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns unknown
   * @throws ApiError
   */
  public static getReadingMaterialsById(
    data: GetReadingMaterialsByIdData,
  ): CancelablePromise<GetReadingMaterialsByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/reading-materials/{id}',
      path: {
        id: data.id,
      },
    });
  }
}

export class GenresService {
  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown
   * @throws ApiError
   */
  public static postGenres(
    data: PostGenresData,
  ): CancelablePromise<PostGenresResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/genres',
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * @returns unknown
   * @throws ApiError
   */
  public static getGenres(): CancelablePromise<GetGenresResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/genres',
    });
  }
}

export class AchievementsService {
  /**
   * Get pupil achievements
   * @returns unknown
   * @throws ApiError
   */
  public static getAchievements(): CancelablePromise<GetAchievementsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/achievements',
    });
  }

  /**
   * Add pupil achievement
   * @param data The data for the request.
   * @param data.pupilId
   * @param data.achievementName
   * @returns unknown
   * @throws ApiError
   */
  public static postAchievementsPupilByPupilIdAchievementByAchievementName(
    data: PostAchievementsPupilByPupilIdAchievementByAchievementNameData,
  ): CancelablePromise<PostAchievementsPupilByPupilIdAchievementByAchievementNameResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/achievements/pupil/{pupilId}/achievement/{achievementName}',
      path: {
        pupilId: data.pupilId,
        achievementName: data.achievementName,
      },
    });
  }

  /**
   * Get achievements for specific pupil (admin/testing)
   * @param data The data for the request.
   * @param data.pupilId
   * @returns unknown
   * @throws ApiError
   */
  public static getAchievementsPupilsByPupilId(
    data: GetAchievementsPupilsByPupilIdData,
  ): CancelablePromise<GetAchievementsPupilsByPupilIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/achievements/pupils/{pupilId}',
      path: {
        pupilId: data.pupilId,
      },
    });
  }

  /**
   * Remove specific achievement from specific pupil
   * @param data The data for the request.
   * @param data.pupilId
   * @param data.achievementId
   * @returns unknown
   * @throws ApiError
   */
  public static deleteAchievementsPupilsByPupilIdAchievementsByAchievementId(
    data: DeleteAchievementsPupilsByPupilIdAchievementsByAchievementIdData,
  ): CancelablePromise<DeleteAchievementsPupilsByPupilIdAchievementsByAchievementIdResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/achievements/pupils/{pupilId}/achievements/{achievementId}',
      path: {
        pupilId: data.pupilId,
        achievementId: data.achievementId,
      },
    });
  }

  /**
   * Delete achievement by id (safety measure)
   * @param data The data for the request.
   * @param data.id
   * @returns unknown
   * @throws ApiError
   */
  public static deleteAchievementsById(
    data: DeleteAchievementsByIdData,
  ): CancelablePromise<DeleteAchievementsByIdResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/achievements/{id}',
      path: {
        id: data.id,
      },
    });
  }
}

export class ActivitiesService {
  /**
   * Create Activity
   * @param data The data for the request.
   * @param data.classroomId
   * @param data.requestBody
   * @returns unknown
   * @throws ApiError
   */
  public static postClassroomsByClassroomIdActivity(
    data: PostClassroomsByClassroomIdActivityData,
  ): CancelablePromise<PostClassroomsByClassroomIdActivityResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/classrooms/{classroomId}/activity',
      path: {
        classroomId: data.classroomId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Get all Activities by Classroom
   * @param data The data for the request.
   * @param data.classroomId
   * @returns unknown
   * @throws ApiError
   */
  public static getClassroomsByClassroomIdActivity(
    data: GetClassroomsByClassroomIdActivityData,
  ): CancelablePromise<GetClassroomsByClassroomIdActivityResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/classrooms/{classroomId}/activity',
      path: {
        classroomId: data.classroomId,
      },
    });
  }

  /**
   * Get Activity by id
   * @param data The data for the request.
   * @param data.activityId
   * @returns unknown
   * @throws ApiError
   */
  public static getClassroomsByClassroomIdActivityByActivityId(
    data: GetClassroomsByClassroomIdActivityByActivityIdData,
  ): CancelablePromise<GetClassroomsByClassroomIdActivityByActivityIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/classrooms/{classroomId}/activity/{activityId}',
      path: {
        activityId: data.activityId,
      },
    });
  }

  /**
   * Update Activity
   * @param data The data for the request.
   * @param data.activityId
   * @param data.requestBody
   * @returns unknown
   * @throws ApiError
   */
  public static patchClassroomsByClassroomIdActivityByActivityId(
    data: PatchClassroomsByClassroomIdActivityByActivityIdData,
  ): CancelablePromise<PatchClassroomsByClassroomIdActivityByActivityIdResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/classrooms/{classroomId}/activity/{activityId}',
      path: {
        activityId: data.activityId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Delete Activity
   * @param data The data for the request.
   * @param data.activityId
   * @returns unknown
   * @throws ApiError
   */
  public static deleteClassroomsByClassroomIdActivityByActivityId(
    data: DeleteClassroomsByClassroomIdActivityByActivityIdData,
  ): CancelablePromise<DeleteClassroomsByClassroomIdActivityByActivityIdResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/classrooms/{classroomId}/activity/{activityId}',
      path: {
        activityId: data.activityId,
      },
    });
  }
}

export class UserService {
  /**
   * @returns unknown
   * @throws ApiError
   */
  public static putUserMeStreak(): CancelablePromise<PutUserMeStreakResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/user/me/streak',
    });
  }

  /**
   * @returns unknown
   * @throws ApiError
   */
  public static getUserMeStreak(): CancelablePromise<GetUserMeStreakResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/user/me/streak',
    });
  }

  /**
   * @returns unknown
   * @throws ApiError
   */
  public static postUserMeSessions(): CancelablePromise<PostUserMeSessionsResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/user/me/sessions',
    });
  }

  /**
   * @returns unknown
   * @throws ApiError
   */
  public static getUserMeSessions(): CancelablePromise<GetUserMeSessionsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/user/me/sessions',
    });
  }

  /**
   * @param data The data for the request.
   * @param data.sessionId
   * @returns unknown
   * @throws ApiError
   */
  public static putUserMeSessionsBySessionId(
    data: PutUserMeSessionsBySessionIdData,
  ): CancelablePromise<PutUserMeSessionsBySessionIdResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/user/me/sessions/{sessionId}',
      path: {
        sessionId: data.sessionId,
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.query
   * @param data.role
   * @returns unknown
   * @throws ApiError
   */
  public static getUserSearch(
    data: GetUserSearchData,
  ): CancelablePromise<GetUserSearchResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/user/search',
      query: {
        query: data.query,
        role: data.role,
      },
    });
  }
}

export class ActivityLogsService {
  /**
   * Create Activity Log
   * @param data The data for the request.
   * @param data.activityId
   * @param data.requestBody
   * @returns unknown
   * @throws ApiError
   */
  public static postClassroomActivityLogsByActivityId(
    data: PostClassroomActivityLogsByActivityIdData,
  ): CancelablePromise<PostClassroomActivityLogsByActivityIdResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/classroom/activity-logs/{activityId}',
      path: {
        activityId: data.activityId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Get an Activity's Activity Logs
   * @param data The data for the request.
   * @param data.activityId
   * @returns unknown
   * @throws ApiError
   */
  public static getClassroomActivityLogsByActivityId(
    data: GetClassroomActivityLogsByActivityIdData,
  ): CancelablePromise<GetClassroomActivityLogsByActivityIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/classroom/activity-logs/{activityId}',
      path: {
        activityId: data.activityId,
      },
    });
  }

  /**
   * Get all Classroom Acitivies' Activity Log
   * @param data The data for the request.
   * @param data.classroomId
   * @returns unknown
   * @throws ApiError
   */
  public static getClassroomActivityLogsByActivityIdClassroomByClassroomIdActivityLogs(
    data: GetClassroomActivityLogsByActivityIdClassroomByClassroomIdActivityLogsData,
  ): CancelablePromise<GetClassroomActivityLogsByActivityIdClassroomByClassroomIdActivityLogsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/classroom/activity-logs/{activityId}/classroom/{classroomId}/activity-logs',
      path: {
        classroomId: data.classroomId,
      },
    });
  }
}

export class DictionaryService {
  /**
   * Get definition of word
   * @param data The data for the request.
   * @param data.word
   * @returns unknown
   * @throws ApiError
   */
  public static getDictionaryDictionaryByWord(
    data: GetDictionaryDictionaryByWordData,
  ): CancelablePromise<GetDictionaryDictionaryByWordResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/dictionary/dictionary/{word}',
      path: {
        word: data.word,
      },
    });
  }
}

export class ImagekitService {
  /**
   * Upload image to ImageKit
   * @returns unknown
   * @throws ApiError
   */
  public static postUploadImage(): CancelablePromise<PostUploadImageResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/upload/image',
    });
  }
}
