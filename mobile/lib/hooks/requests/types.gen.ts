// This file is auto-generated by @hey-api/openapi-ts

export type RegisterDto = {
  /**
   * Username
   */
  username: string;
  /**
   * User first name
   */
  first_name: string;
  /**
   * User last name
   */
  last_name: string;
  /**
   * User email
   */
  email: string;
  /**
   * User password
   */
  password: string;
  /**
   * Password confirmation
   */
  confirm_password: string;
  /**
   * User role
   */
  role: 'Pupil' | 'Teacher';
};

/**
 * User role
 */
export type role = 'Pupil' | 'Teacher';

export type UserResponseDto = {
  /**
   * User ID
   */
  id: string;
  /**
   * Email
   */
  email: string | null;
  /**
   * First name
   */
  first_name: string | null;
  /**
   * Last name
   */
  last_name: string | null;
  /**
   * User role
   */
  role: string | null;
  /**
   * Created at
   */
  created_at?: string;
  /**
   * Created at
   */
  updated_at?: string;
};

export type AuthResponseDto = {
  /**
   * Access token
   */
  access_token: string;
  /**
   * User info
   */
  user: UserResponseDto;
  /**
   * Refresh token
   */
  refresh_token?: string;
};

export type ErrorResponseDto = {
  message: string;
  /**
   * Detailed error, if any
   */
  error?: string;
};

export type LoginDto = {
  /**
   * User email
   */
  email: string;
  /**
   * User password
   */
  password: string;
};

export type SuccessResponseDto = {
  /**
   * Response status
   */
  status: string;
  message: string;
  /**
   * Response data
   */
  data: {
    [key: string]: unknown;
  };
};

export type GoogleExchangeTokenDto = {
  /**
   * Google ID Token
   */
  id_token: string;
};

export type RefreshTokenDto = {
  /**
   * Refresh token
   */
  refresh_token: string;
};

export type ForgotPasswordDto = {
  /**
   * User email
   */
  email: string;
};

export type ResetPasswordDto = {
  /**
   * Reset token
   */
  token: string;
  /**
   * New password
   */
  new_password: string;
};

export type UpdateProfileDto = {
  /**
   * Username
   */
  username?: string;
  /**
   * First name
   */
  first_name?: string;
  /**
   * Last name
   */
  last_name?: string;
  /**
   * Email address
   */
  email?: string;
  /**
   * Avatar
   */
  avatar?: string;
};

export type ChangePasswordDto = {
  /**
   * Current password
   */
  current_password: string;
  /**
   * New password
   */
  new_password: string;
};

export type UpdatePupilProfileDto = {
  /**
   * Age
   */
  age: number;
  /**
   * Grade Level
   */
  grade_level: number;
};

export type CreateClassroomDto = {
  /**
   * Classroom Name
   */
  name: string;
  /**
   * Classroom Name
   */
  description: string;
};

export type EnrollPupilDto = {
  /**
   * Classroom Id
   */
  classroom_id: string;
  /**
   * Array of Pupil Ids
   */
  pupil_ids: Array<string>;
};

export type UnEnrollPupilDto = {
  /**
   * Classroom Id
   */
  classroom_id: string;
  /**
   * Array of Pupil Ids
   */
  pupil_ids: Array<string>;
};

export type JoinClassroomDto = {
  /**
   * Classroom Code
   */
  code: string;
};

export type LeaveClassroomDto = {
  /**
   * Classroom Id
   */
  classroom_id: string;
};

export type UpdateClassroomDto = {
  /**
   * Classroom Name
   */
  name?: string;
  /**
   * Classroom Name
   */
  description?: string;
};

export type CreateWordsFromLettersGame = {
  /**
   * Reading Material Id
   */
  reading_material_id: string;
  /**
   * Part number of where the minigame appears in the story. Always 10 for WordsFromLetters.
   */
  part_num: number;
  /**
   * Contains the letters needed in creating words.
   */
  letters: Array<string>;
  /**
   * Words that can be created from the letters list.
   */
  words: Array<string>;
};

export type ChoicesObject = {
  /**
   * Choice text
   */
  choice: string;
  /**
   * Whether this choice is correct
   */
  answer: boolean;
};

export type CreateChoicesGame = {
  /**
   * Reading Material Id
   */
  reading_material_id: string;
  /**
   * Part number of where the minigame appears in the story.
   */
  part_num: number;
  /**
   * Question
   */
  question: string;
  /**
   * List of choices.
   */
  choices: Array<ChoicesObject>;
  /**
   * Explanation of the answer.
   */
  explanation: string;
};

export type CreateSentenceRearrangementGame = {
  /**
   * Reading Material Id
   */
  reading_material_id: string;
  /**
   * Part number of where the minigame appears in the story.
   */
  part_num: number;
  /**
   * List of correct answers.
   */
  correct_answer: Array<string>;
  /**
   * Sentence parts
   */
  parts: Array<string>;
  /**
   * Explanation of the answer.
   */
  explanation: string;
};

export type CreateMinigameLogDto = {
  /**
   * Minigame ID
   */
  minigame_id: string;
  /**
   * Pupil ID
   */
  pupil_id: string;
  /**
   * Reading Session ID
   */
  reading_session_id: string;
  /**
   * Minigame Result in JSON format
   */
  result: string;
};

export type CreateReadingSessionDto = {
  /**
   * Reading material id
   */
  reading_material_id: string;
};

export type UpdateReadingSessionDto = {
  /**
   * Completion percentage of the reading session
   */
  completion_percentage: number;
};

export type CreateReadingMaterialDto = {
  /**
   * Source of the reading material
   */
  is_deped: boolean;
  /**
   * Title of the reading material
   */
  title: string;
  /**
   * Author of the reading material
   */
  author: string;
  /**
   * Description of the reading material
   */
  description: string;
  /**
   * Grade level for which the reading material is suitable
   */
  grade_level: number;
  /**
   * Cover link image URL for the reading material
   */
  cover: string;
  /**
   * List of genre for the reading material
   */
  genres: Array<string>;
  /**
   * Content of the reading material
   */
  content: string;
};

export type CreateGenreDto = {
  /**
   * Name of the genre
   */
  name: string;
};

export type CreateActivityDTO = {
  /**
   * Activity Name
   */
  title: string;
  /**
   * Description on what the activity is about
   */
  description?: string;
  reading_material_id: string;
};

export type UpdateActivityDTO = {
  /**
   * Activity Name
   */
  title?: string;
  /**
   * Description on what the activity is about
   */
  description?: string;
  reading_material_id?: string;
};

export type CreateActivityLogDto = {
  /**
   * Minigame log Id
   */
  minigame_log_id: string;
};

export type PostAuthRegisterData = {
  /**
   * User registration data
   */
  requestBody: RegisterDto;
};

export type PostAuthRegisterResponse = AuthResponseDto;

export type PostAuthLoginData = {
  /**
   * User login credentials
   */
  requestBody: LoginDto;
};

export type PostAuthLoginResponse = SuccessResponseDto;

export type PostAuthGoogleTokenData = {
  requestBody: GoogleExchangeTokenDto;
};

export type PostAuthGoogleTokenResponse = SuccessResponseDto;

export type PostAuthRefreshData = {
  /**
   * Refresh token
   */
  requestBody: RefreshTokenDto;
};

export type PostAuthRefreshResponse = SuccessResponseDto;

export type PostAuthForgotPasswordData = {
  /**
   * User email for password reset
   */
  requestBody: ForgotPasswordDto;
};

export type PostAuthForgotPasswordResponse = SuccessResponseDto;

export type PostAuthResetPasswordData = {
  /**
   * Reset token and new password
   */
  requestBody: ResetPasswordDto;
};

export type PostAuthResetPasswordResponse = SuccessResponseDto;

export type PostAuthRequestEmailVerificationResponse = SuccessResponseDto;

export type GetAuthVerifyEmailData = {
  /**
   * Email verification token
   */
  token: string;
};

export type GetAuthVerifyEmailResponse = SuccessResponseDto;

export type GetAuthMeResponse = SuccessResponseDto;

export type PatchAuthMeData = {
  /**
   * Profile update data
   */
  requestBody: UpdateProfileDto;
};

export type PatchAuthMeResponse = SuccessResponseDto;

export type PostAuthChangePasswordData = {
  /**
   * Current and new password
   */
  requestBody: ChangePasswordDto;
};

export type PostAuthChangePasswordResponse = SuccessResponseDto;

export type PostAuthLogoutData = {
  /**
   * Optional refresh token to revoke
   */
  requestBody?: {
    refresh_token?: string;
  };
};

export type PostAuthLogoutResponse = SuccessResponseDto;

export type GetAuthVerifyTokenResponse = {
  valid?: boolean;
  user?: UserResponseDto;
};

export type GetAuthProfileResponse = UserResponseDto;

export type GetPupilsMeResponse = SuccessResponseDto;

export type PatchPupilsMeData = {
  /**
   * Pupil profile update data
   */
  requestBody: UpdatePupilProfileDto;
};

export type PatchPupilsMeResponse = SuccessResponseDto;

export type GetPupilsByUsernameData = {
  username: string;
};

export type GetPupilsByUsernameResponse = SuccessResponseDto;

export type GetPupilsLeaderboardResponse = SuccessResponseDto;

export type GetPupilsLeaderboardByPupilIdData = {
  pupilId: string;
};

export type GetPupilsLeaderboardByPupilIdResponse = SuccessResponseDto;

export type PostClassroomsData = {
  requestBody: CreateClassroomDto;
};

export type PostClassroomsResponse = SuccessResponseDto;

export type GetClassroomsResponse = SuccessResponseDto;

export type PostClassroomsEnrollData = {
  requestBody: EnrollPupilDto;
};

export type PostClassroomsEnrollResponse = SuccessResponseDto;

export type PostClassroomsUnenrollData = {
  requestBody: UnEnrollPupilDto;
};

export type PostClassroomsUnenrollResponse = SuccessResponseDto;

export type PostClassroomsJoinData = {
  requestBody: JoinClassroomDto;
};

export type PostClassroomsJoinResponse = unknown;

export type PostClassroomsLeaveData = {
  requestBody: LeaveClassroomDto;
};

export type PostClassroomsLeaveResponse = SuccessResponseDto;

export type GetClassroomsByIdData = {
  id: string;
};

export type GetClassroomsByIdResponse = SuccessResponseDto;

export type PatchClassroomsByIdData = {
  id: string;
  requestBody: UpdateClassroomDto;
};

export type PatchClassroomsByIdResponse = SuccessResponseDto;

export type DeleteClassroomsByIdData = {
  id: string;
};

export type DeleteClassroomsByIdResponse = SuccessResponseDto;

export type PostMinigamesWordsFromLettersData = {
  requestBody: CreateWordsFromLettersGame;
};

export type PostMinigamesWordsFromLettersResponse = SuccessResponseDto;

export type PostMinigamesChoicesData = {
  requestBody: CreateChoicesGame;
};

export type PostMinigamesChoicesResponse = SuccessResponseDto;

export type PostMinigamesSentenceRearrangementData = {
  requestBody: CreateSentenceRearrangementGame;
};

export type PostMinigamesSentenceRearrangementResponse = SuccessResponseDto;

export type GetMinigamesReadingmaterialsByReadingMaterialIdRandomData = {
  readingMaterialId: string;
};

export type GetMinigamesReadingmaterialsByReadingMaterialIdRandomResponse =
  SuccessResponseDto;

export type GetMinigamesByReadingSessionIdRandomData = {
  readingSessionId: string;
};

export type GetMinigamesByReadingSessionIdRandomResponse = SuccessResponseDto;

export type GetMinigamesByReadingMaterialIdWordsFromLettersData = {
  readingMaterialId: string;
};

export type GetMinigamesByReadingMaterialIdWordsFromLettersResponse =
  SuccessResponseDto;

export type PostMinigamesByReadingSessionIdCompleteData = {
  readingSessionId: string;
};

export type PostMinigamesByReadingSessionIdCompleteResponse =
  SuccessResponseDto;

export type PostMinigamesLogsSentenceRearrangementData = {
  requestBody: CreateMinigameLogDto;
};

export type PostMinigamesLogsSentenceRearrangementResponse = SuccessResponseDto;

export type PostMinigamesLogsChoicesData = {
  requestBody: CreateMinigameLogDto;
};

export type PostMinigamesLogsChoicesResponse = SuccessResponseDto;

export type PostMinigamesLogsWordsFromLettersData = {
  requestBody: CreateMinigameLogDto;
};

export type PostMinigamesLogsWordsFromLettersResponse = SuccessResponseDto;

export type PostReadingSessionsData = {
  requestBody: CreateReadingSessionDto;
};

export type PostReadingSessionsResponse = SuccessResponseDto;

export type GetReadingSessionsResponse = SuccessResponseDto;

export type GetReadingSessionsByIdData = {
  id: string;
};

export type GetReadingSessionsByIdResponse = SuccessResponseDto;

export type PatchReadingSessionsByIdData = {
  id: string;
  requestBody: UpdateReadingSessionDto;
};

export type PatchReadingSessionsByIdResponse = SuccessResponseDto;

export type DeleteReadingSessionsByIdData = {
  id: string;
};

export type DeleteReadingSessionsByIdResponse = SuccessResponseDto;

export type PostReadingMaterialsData = {
  requestBody: CreateReadingMaterialDto;
};

export type PostReadingMaterialsResponse = SuccessResponseDto;

export type GetReadingMaterialsResponse = SuccessResponseDto;

export type GetReadingMaterialsRecommendationsResponse = SuccessResponseDto;

export type GetReadingMaterialsByIdData = {
  id: string;
};

export type GetReadingMaterialsByIdResponse = SuccessResponseDto;

export type PostGenresData = {
  requestBody: CreateGenreDto;
};

export type PostGenresResponse = SuccessResponseDto;

export type GetGenresResponse = SuccessResponseDto;

export type GetAchievementsResponse = SuccessResponseDto;

export type PostAchievementsPupilByPupilIdAchievementByAchievementNameData = {
  achievementName: string;
  pupilId: string;
};

export type PostAchievementsPupilByPupilIdAchievementByAchievementNameResponse =
  SuccessResponseDto;

export type GetAchievementsPupilsByPupilIdData = {
  pupilId: string;
};

export type GetAchievementsPupilsByPupilIdResponse = SuccessResponseDto;

export type DeleteAchievementsPupilsByPupilIdAchievementsByAchievementIdData = {
  achievementId: string;
  pupilId: string;
};

export type DeleteAchievementsPupilsByPupilIdAchievementsByAchievementIdResponse =
  SuccessResponseDto;

export type DeleteAchievementsByIdData = {
  id: string;
};

export type DeleteAchievementsByIdResponse = SuccessResponseDto;

export type PostClassroomsByClassroomIdActivityData = {
  classroomId: string;
  requestBody: CreateActivityDTO;
};

export type PostClassroomsByClassroomIdActivityResponse = SuccessResponseDto;

export type GetClassroomsByClassroomIdActivityData = {
  classroomId: string;
};

export type GetClassroomsByClassroomIdActivityResponse = SuccessResponseDto;

export type GetClassroomsByClassroomIdActivityByActivityIdData = {
  activityId: string;
  classroomId: string;
};

export type GetClassroomsByClassroomIdActivityByActivityIdResponse =
  SuccessResponseDto;

export type PatchClassroomsByClassroomIdActivityByActivityIdData = {
  activityId: string;
  classroomId: string;
  requestBody: UpdateActivityDTO;
};

export type PatchClassroomsByClassroomIdActivityByActivityIdResponse =
  SuccessResponseDto;

export type DeleteClassroomsByClassroomIdActivityByActivityIdData = {
  activityId: string;
  classroomId: string;
};

export type DeleteClassroomsByClassroomIdActivityByActivityIdResponse =
  SuccessResponseDto;

export type PutUserMeStreakResponse = SuccessResponseDto;

export type GetUserMeStreakResponse = SuccessResponseDto;

export type PostUserMeSessionsResponse = SuccessResponseDto;

export type GetUserMeSessionsResponse = SuccessResponseDto;

export type PutUserMeSessionsBySessionIdData = {
  sessionId: string;
};

export type PutUserMeSessionsBySessionIdResponse = SuccessResponseDto;

export type GetUserSearchData = {
  query: string;
  role: string;
};

export type GetUserSearchResponse = SuccessResponseDto;

export type PostClassroomActivityLogsByActivityIdData = {
  activityId: string;
  requestBody: CreateActivityLogDto;
};

export type PostClassroomActivityLogsByActivityIdResponse = SuccessResponseDto;

export type GetClassroomActivityLogsByActivityIdData = {
  activityId: string;
};

export type GetClassroomActivityLogsByActivityIdResponse = SuccessResponseDto;

export type GetClassroomActivityLogsByActivityIdClassroomByClassroomIdActivityLogsData =
  {
    activityId: string;
    classroomId: string;
  };

export type GetClassroomActivityLogsByActivityIdClassroomByClassroomIdActivityLogsResponse =
  SuccessResponseDto;

export type GetDictionaryDictionaryByWordData = {
  word: string;
};

export type GetDictionaryDictionaryByWordResponse = SuccessResponseDto;

export type PostUploadImageResponse = SuccessResponseDto;

export type $OpenApiTs = {
  '/auth/register': {
    post: {
      req: PostAuthRegisterData;
      res: {
        /**
         * User successfully registered
         */
        201: AuthResponseDto;
        /**
         * Invalid input data
         */
        400: ErrorResponseDto;
        /**
         * User already exists
         */
        409: ErrorResponseDto;
      };
    };
  };
  '/auth/login': {
    post: {
      req: PostAuthLoginData;
      res: {
        /**
         * User successfully logged in
         */
        200: SuccessResponseDto;
        /**
         * Invalid input data
         */
        400: ErrorResponseDto;
        /**
         * Invalid credentials
         */
        401: ErrorResponseDto;
      };
    };
  };
  '/auth/google/token': {
    post: {
      req: PostAuthGoogleTokenData;
      res: {
        200: SuccessResponseDto;
      };
    };
  };
  '/auth/refresh': {
    post: {
      req: PostAuthRefreshData;
      res: {
        /**
         * Token refreshed successfully
         */
        200: SuccessResponseDto;
        /**
         * Invalid refresh token
         */
        401: ErrorResponseDto;
      };
    };
  };
  '/auth/forgot-password': {
    post: {
      req: PostAuthForgotPasswordData;
      res: {
        /**
         * Password reset email sent (if email exists)
         */
        200: SuccessResponseDto;
        /**
         * Invalid input data
         */
        400: ErrorResponseDto;
      };
    };
  };
  '/auth/reset-password': {
    post: {
      req: PostAuthResetPasswordData;
      res: {
        /**
         * Password reset successfully
         */
        200: SuccessResponseDto;
        /**
         * Invalid or expired reset token
         */
        400: ErrorResponseDto;
      };
    };
  };
  '/auth/request-email-verification': {
    post: {
      res: {
        /**
         * Email verication sent.
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/auth/verify-email': {
    get: {
      req: GetAuthVerifyEmailData;
      res: {
        /**
         * Email verified successfully
         */
        200: SuccessResponseDto;
        /**
         * Invalid or expired verification token
         */
        400: ErrorResponseDto;
      };
    };
  };
  '/auth/me': {
    get: {
      res: {
        /**
         * User profile retrieved successfully
         */
        200: SuccessResponseDto;
        /**
         * Invalid or missing token
         */
        401: ErrorResponseDto;
      };
    };
    patch: {
      req: PatchAuthMeData;
      res: {
        /**
         * Profile updated successfully
         */
        200: SuccessResponseDto;
        /**
         * Invalid or missing token
         */
        401: ErrorResponseDto;
        /**
         * Email already exists
         */
        409: ErrorResponseDto;
      };
    };
  };
  '/auth/change-password': {
    post: {
      req: PostAuthChangePasswordData;
      res: {
        /**
         * Password changed successfully
         */
        200: SuccessResponseDto;
        /**
         * Invalid or missing token / Current password incorrect
         */
        401: ErrorResponseDto;
      };
    };
  };
  '/auth/logout': {
    post: {
      req: PostAuthLogoutData;
      res: {
        /**
         * User successfully logged out
         */
        200: SuccessResponseDto;
        /**
         * Invalid or missing token
         */
        401: ErrorResponseDto;
      };
    };
  };
  '/auth/verify-token': {
    get: {
      res: {
        /**
         * Token is valid
         */
        200: {
          valid?: boolean;
          user?: UserResponseDto;
        };
        /**
         * Invalid or expired token
         */
        401: ErrorResponseDto;
      };
    };
  };
  '/auth/profile': {
    get: {
      res: {
        /**
         * User profile retrieved successfully
         */
        200: UserResponseDto;
        /**
         * Invalid or missing token
         */
        401: ErrorResponseDto;
      };
    };
  };
  '/pupils/me': {
    get: {
      res: {
        /**
         * Pupil profile successfully fetched
         */
        201: SuccessResponseDto;
        /**
         * Invalid credentials
         */
        401: ErrorResponseDto;
      };
    };
    patch: {
      req: PatchPupilsMeData;
      res: {
        /**
         * Pupil profile successfully updated
         */
        200: SuccessResponseDto;
        /**
         * Invalid credentials
         */
        401: ErrorResponseDto;
      };
    };
  };
  '/pupils/{username}': {
    get: {
      req: GetPupilsByUsernameData;
      res: {
        /**
         * Pupil profile successfully fetched
         */
        201: SuccessResponseDto;
        /**
         * Invalid credentials
         */
        401: ErrorResponseDto;
      };
    };
  };
  '/pupils/leaderboard': {
    get: {
      res: {
        /**
         * Global pupil leaderboard successfully fetched
         */
        201: SuccessResponseDto;
        /**
         * Invalid credentials
         */
        401: ErrorResponseDto;
      };
    };
  };
  '/pupils/leaderboard/{pupilId}': {
    get: {
      req: GetPupilsLeaderboardByPupilIdData;
      res: {
        /**
         * Pupil leaderboard successfully fetched
         */
        201: SuccessResponseDto;
        /**
         * Invalid credentials
         */
        401: ErrorResponseDto;
      };
    };
  };
  '/classrooms': {
    post: {
      req: PostClassroomsData;
      res: {
        /**
         * Classroom created successfully
         */
        201: SuccessResponseDto;
      };
    };
    get: {
      res: {
        /**
         * Classrooms fetched successfully
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/classrooms/enroll': {
    post: {
      req: PostClassroomsEnrollData;
      res: {
        /**
         * Pupils enrolled successfully
         */
        201: SuccessResponseDto;
      };
    };
  };
  '/classrooms/unenroll': {
    post: {
      req: PostClassroomsUnenrollData;
      res: {
        /**
         * Pupils unenrolled successfully
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/classrooms/join': {
    post: {
      req: PostClassroomsJoinData;
      res: {
        201: unknown;
      };
    };
  };
  '/classrooms/leave': {
    post: {
      req: PostClassroomsLeaveData;
      res: {
        /**
         * Left classroom successfully
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/classrooms/{id}': {
    get: {
      req: GetClassroomsByIdData;
      res: {
        /**
         * Classroom fetched successfully
         */
        200: SuccessResponseDto;
      };
    };
    patch: {
      req: PatchClassroomsByIdData;
      res: {
        /**
         * Classroom updated successfully
         */
        200: SuccessResponseDto;
      };
    };
    delete: {
      req: DeleteClassroomsByIdData;
      res: {
        /**
         * Classroom deleted successfully
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/minigames/wordsFromLetters': {
    post: {
      req: PostMinigamesWordsFromLettersData;
      res: {
        /**
         * Words From Letters minigame created successfully
         */
        201: SuccessResponseDto;
      };
    };
  };
  '/minigames/choices': {
    post: {
      req: PostMinigamesChoicesData;
      res: {
        /**
         * Choices minigame created successfully
         */
        201: SuccessResponseDto;
      };
    };
  };
  '/minigames/sentenceRearrangement': {
    post: {
      req: PostMinigamesSentenceRearrangementData;
      res: {
        /**
         * Sentence Rearrangement minigame created successfully
         */
        201: SuccessResponseDto;
      };
    };
  };
  '/minigames/readingmaterials/{readingMaterialID}/random': {
    get: {
      req: GetMinigamesReadingmaterialsByReadingMaterialIdRandomData;
      res: {
        /**
         * Random minigames fetched successfully
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/minigames/{readingSessionID}/random': {
    get: {
      req: GetMinigamesByReadingSessionIdRandomData;
      res: {
        /**
         * Minigames fetched successfully
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/minigames/{readingMaterialID}/wordsFromLetters': {
    get: {
      req: GetMinigamesByReadingMaterialIdWordsFromLettersData;
      res: {
        /**
         * Words from Letters minigame fetched successfully
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/minigames/{readingSessionID}/complete': {
    post: {
      req: PostMinigamesByReadingSessionIdCompleteData;
      res: {
        /**
         * Reading session completed successfully
         */
        201: SuccessResponseDto;
      };
    };
  };
  '/minigames/logs/SentenceRearrangement': {
    post: {
      req: PostMinigamesLogsSentenceRearrangementData;
      res: {
        /**
         * Sentence Rearrangement Log created successfully
         */
        201: SuccessResponseDto;
      };
    };
  };
  '/minigames/logs/Choices': {
    post: {
      req: PostMinigamesLogsChoicesData;
      res: {
        /**
         * Choices log created successfully
         */
        201: SuccessResponseDto;
      };
    };
  };
  '/minigames/logs/WordsFromLetters': {
    post: {
      req: PostMinigamesLogsWordsFromLettersData;
      res: {
        /**
         * Words From Letters log created successfully
         */
        201: SuccessResponseDto;
      };
    };
  };
  '/reading-sessions': {
    post: {
      req: PostReadingSessionsData;
      res: {
        /**
         * Reading session created successfully
         */
        201: SuccessResponseDto;
      };
    };
    get: {
      res: {
        /**
         * Reading sessions fetched successfully
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/reading-sessions/{id}': {
    get: {
      req: GetReadingSessionsByIdData;
      res: {
        /**
         * Reading session fetched successfully
         */
        200: SuccessResponseDto;
      };
    };
    patch: {
      req: PatchReadingSessionsByIdData;
      res: {
        /**
         * Reading session updated successfully
         */
        200: SuccessResponseDto;
      };
    };
    delete: {
      req: DeleteReadingSessionsByIdData;
      res: {
        /**
         * Reading session deleted successfully
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/reading-materials': {
    post: {
      req: PostReadingMaterialsData;
      res: {
        /**
         * Reading material created successfully
         */
        201: SuccessResponseDto;
      };
    };
    get: {
      res: {
        /**
         * Reading materials fetched successfully
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/reading-materials/recommendations': {
    get: {
      res: {
        /**
         * Recommended reading materials fetched successfully
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/reading-materials/{id}': {
    get: {
      req: GetReadingMaterialsByIdData;
      res: {
        /**
         * Reading material fetched successfully
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/genres': {
    post: {
      req: PostGenresData;
      res: {
        /**
         * Genre created successfully
         */
        201: SuccessResponseDto;
      };
    };
    get: {
      res: {
        /**
         * Genres fetched successfully
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/achievements': {
    get: {
      res: {
        /**
         * Pupil achievements fetched successfully
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/achievements/pupil/{pupilId}/achievement/{achievementName}': {
    post: {
      req: PostAchievementsPupilByPupilIdAchievementByAchievementNameData;
      res: {
        /**
         * Pupil achievement added successfully
         */
        201: SuccessResponseDto;
      };
    };
  };
  '/achievements/pupils/{pupilId}': {
    get: {
      req: GetAchievementsPupilsByPupilIdData;
      res: {
        /**
         * Pupil achievements fetched successfully
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/achievements/pupils/{pupilId}/achievements/{achievementId}': {
    delete: {
      req: DeleteAchievementsPupilsByPupilIdAchievementsByAchievementIdData;
      res: {
        /**
         * Achievement removed from pupil successfully
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/achievements/{id}': {
    delete: {
      req: DeleteAchievementsByIdData;
      res: {
        /**
         * Achievement deleted successfully
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/classrooms/{classroomId}/activity': {
    post: {
      req: PostClassroomsByClassroomIdActivityData;
      res: {
        /**
         * Activity created successfully
         */
        201: SuccessResponseDto;
      };
    };
    get: {
      req: GetClassroomsByClassroomIdActivityData;
      res: {
        /**
         * Activities of classroom fetched successfully
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/classrooms/{classroomId}/activity/{activityId}': {
    get: {
      req: GetClassroomsByClassroomIdActivityByActivityIdData;
      res: {
        /**
         * Activity fetched successfully
         */
        200: SuccessResponseDto;
      };
    };
    patch: {
      req: PatchClassroomsByClassroomIdActivityByActivityIdData;
      res: {
        /**
         * Activity updated successfully
         */
        200: SuccessResponseDto;
      };
    };
    delete: {
      req: DeleteClassroomsByClassroomIdActivityByActivityIdData;
      res: {
        /**
         * Activity deleted successfully
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/user/me/streak': {
    put: {
      res: {
        /**
         * Login streak updated successfully
         */
        200: SuccessResponseDto;
      };
    };
    get: {
      res: {
        /**
         * Login streak fetched successfully
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/user/me/sessions': {
    post: {
      res: {
        /**
         * Session created successfully
         */
        201: SuccessResponseDto;
      };
    };
    get: {
      res: {
        /**
         * Total sessions fetched successfully
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/user/me/sessions/{sessionId}': {
    put: {
      req: PutUserMeSessionsBySessionIdData;
      res: {
        /**
         * Session ended successfully
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/user/search': {
    get: {
      req: GetUserSearchData;
      res: {
        /**
         * Users fetched successfully
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/classroom/activity-logs/{activityId}': {
    post: {
      req: PostClassroomActivityLogsByActivityIdData;
      res: {
        /**
         * Activity Log created successfully
         */
        201: SuccessResponseDto;
      };
    };
    get: {
      req: GetClassroomActivityLogsByActivityIdData;
      res: {
        /**
         * Activity logs for activity fetched successfully
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/classroom/activity-logs/{activityId}/classroom/{classroomId}/activity-logs': {
    get: {
      req: GetClassroomActivityLogsByActivityIdClassroomByClassroomIdActivityLogsData;
      res: {
        /**
         * Activity logs for classroom fetched successfully
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/dictionary/dictionary/{word}': {
    get: {
      req: GetDictionaryDictionaryByWordData;
      res: {
        /**
         * Definition fetched successfully
         */
        200: SuccessResponseDto;
      };
    };
  };
  '/upload/image': {
    post: {
      res: {
        /**
         * Image uploaded successfully
         */
        201: SuccessResponseDto;
      };
    };
  };
};
