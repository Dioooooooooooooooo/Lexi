// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, Client, TDataShape } from './client';
import type { AuthControllerRegisterData, AuthControllerRegisterResponses, AuthControllerRegisterErrors, AuthControllerLoginData, AuthControllerLoginResponses, AuthControllerLoginErrors, AuthControllerExchangeGoogleIdTokenData, AuthControllerExchangeGoogleIdTokenResponses, AuthControllerRefreshTokenData, AuthControllerRefreshTokenResponses, AuthControllerRefreshTokenErrors, AuthControllerForgotPasswordData, AuthControllerForgotPasswordResponses, AuthControllerForgotPasswordErrors, AuthControllerResetPasswordData, AuthControllerResetPasswordResponses, AuthControllerResetPasswordErrors, AuthControllerRequestEmailVerificationData, AuthControllerRequestEmailVerificationResponses, AuthControllerVerifyEmailData, AuthControllerVerifyEmailResponses, AuthControllerVerifyEmailErrors, AuthControllerCheckUserData, AuthControllerCheckUserResponses, AuthControllerDeleteUserData, AuthControllerDeleteUserResponses, AuthControllerGetProfileData, AuthControllerGetProfileResponses, AuthControllerGetProfileErrors, AuthControllerUpdateProfileData, AuthControllerUpdateProfileResponses, AuthControllerUpdateProfileErrors, AuthControllerChangePasswordData, AuthControllerChangePasswordResponses, AuthControllerChangePasswordErrors, AuthControllerLogoutData, AuthControllerLogoutResponses, AuthControllerLogoutErrors, AuthControllerVerifyTokenData, AuthControllerVerifyTokenResponses, AuthControllerVerifyTokenErrors, AuthControllerGetProfileLegacyData, AuthControllerGetProfileLegacyResponses, AuthControllerGetProfileLegacyErrors, PupilsControllerGetPupilProfileData, PupilsControllerGetPupilProfileResponses, PupilsControllerGetPupilProfileErrors, PupilsControllerUpdatePupilProfileData, PupilsControllerUpdatePupilProfileResponses, PupilsControllerUpdatePupilProfileErrors, PupilsControllerGetPupilByUsernameData, PupilsControllerGetPupilByUsernameResponses, PupilsControllerGetPupilByUsernameErrors, PupilsControllerGetGlobalPupilLeaderboardData, PupilsControllerGetGlobalPupilLeaderboardResponses, PupilsControllerGetGlobalPupilLeaderboardErrors, PupilsControllerGetPupilLeaderBoardByPupilIdData, PupilsControllerGetPupilLeaderBoardByPupilIdResponses, PupilsControllerGetPupilLeaderBoardByPupilIdErrors, ClassroomsControllerFindAllData, ClassroomsControllerFindAllResponses, ClassroomsControllerCreateData, ClassroomsControllerCreateResponses, ClassroomsControllerEnrollData, ClassroomsControllerEnrollResponses, ClassroomsControllerUnEnrollData, ClassroomsControllerUnEnrollResponses, ClassroomsControllerJoinData, ClassroomsControllerJoinResponses, ClassroomsControllerLeaveData, ClassroomsControllerLeaveResponses, ClassroomsControllerRemoveData, ClassroomsControllerRemoveResponses, ClassroomsControllerFindOneData, ClassroomsControllerFindOneResponses, ClassroomsControllerUpdateData, ClassroomsControllerUpdateResponses, MinigamesControllerCreateWflMinigameData, MinigamesControllerCreateWflMinigameResponses, MinigamesControllerCreateChoicesMinigameData, MinigamesControllerCreateChoicesMinigameResponses, MinigamesControllerCreateSrMinigameData, MinigamesControllerCreateSrMinigameResponses, MinigamesControllerFindMinigamesByMaterialIdData, MinigamesControllerFindMinigamesByMaterialIdResponses, MinigamesControllerFindMinigamelogsByReadingSessionIdData, MinigamesControllerFindMinigamelogsByReadingSessionIdResponses, MinigamesControllerUpdateSentenceRearrangementLogData, MinigamesControllerUpdateSentenceRearrangementLogResponses, MinigamesControllerCreateSentenceRearrangementLogData, MinigamesControllerCreateSentenceRearrangementLogResponses, MinigamesControllerUpdateChoicesLogData, MinigamesControllerUpdateChoicesLogResponses, MinigamesControllerCreateChoicesLogData, MinigamesControllerCreateChoicesLogResponses, MinigamesControllerUpdateWordsFromLettersLogData, MinigamesControllerUpdateWordsFromLettersLogResponses, MinigamesControllerCreateWordsFromLettersLogData, MinigamesControllerCreateWordsFromLettersLogResponses, MinigamesControllerFindMinigamesBySessionIdData, MinigamesControllerFindMinigamesBySessionIdResponses, MinigamesControllerFindRandomMinigamesBySessionIdData, MinigamesControllerFindRandomMinigamesBySessionIdResponses, MinigamesControllerFindWordsFromLettersMinigameData, MinigamesControllerFindWordsFromLettersMinigameResponses, MinigamesControllerGetMinigamesCompletionData, MinigamesControllerGetMinigamesCompletionResponses, ReadingSessionsControllerFindAllData, ReadingSessionsControllerFindAllResponses, ReadingSessionsControllerCreateData, ReadingSessionsControllerCreateResponses, ReadingSessionsControllerRemoveData, ReadingSessionsControllerRemoveResponses, ReadingSessionsControllerFindOneData, ReadingSessionsControllerFindOneResponses, ReadingSessionsControllerUpdateData, ReadingSessionsControllerUpdateResponses, ReadingMaterialsControllerFindAllData, ReadingMaterialsControllerFindAllResponses, ReadingMaterialsControllerCreateData, ReadingMaterialsControllerCreateResponses, ReadingMaterialsControllerFindRecommendationsData, ReadingMaterialsControllerFindRecommendationsResponses, ReadingMaterialsControllerFindOneData, ReadingMaterialsControllerFindOneResponses, GenresControllerFindAllData, GenresControllerFindAllResponses, GenresControllerCreateData, GenresControllerCreateResponses, AchievementsControllerGetPupilAchievementsData, AchievementsControllerGetPupilAchievementsResponses, AchievementsControllerAddPupilAchievementData, AchievementsControllerAddPupilAchievementResponses, AchievementsControllerGetPupilAchievementsByIdData, AchievementsControllerGetPupilAchievementsByIdResponses, AchievementsControllerRemovePupilAchievementData, AchievementsControllerRemovePupilAchievementResponses, AchievementsControllerRemoveData, AchievementsControllerRemoveResponses, ActivityControllerFindAllByClassroomIdData, ActivityControllerFindAllByClassroomIdResponses, ActivityControllerCreateData, ActivityControllerCreateResponses, ActivityControllerRemoveData, ActivityControllerRemoveResponses, ActivityControllerFindOneData, ActivityControllerFindOneResponses, ActivityControllerUpdateData, ActivityControllerUpdateResponses, UserControllerGetLoginStreakData, UserControllerGetLoginStreakResponses, UserControllerUpdateLoginStreakData, UserControllerUpdateLoginStreakResponses, UserControllerGetTotalSessionsData, UserControllerGetTotalSessionsResponses, UserControllerCreateSessionData, UserControllerCreateSessionResponses, UserControllerEndSessionData, UserControllerEndSessionResponses, UserControllerSearchUsersData, UserControllerSearchUsersResponses, ActivityLogsControllerFindOneData, ActivityLogsControllerFindOneResponses, ActivityLogsControllerCreateData, ActivityLogsControllerCreateResponses, ActivityLogsControllerFindAllData, ActivityLogsControllerFindAllResponses, DictionaryControllerDefinitionData, DictionaryControllerDefinitionResponses, ImagekitControllerUploadImageData, ImagekitControllerUploadImageResponses } from './types.gen';
import { client } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Register a new user
 * Create a new user account with email and password
 */
export const authControllerRegister = <ThrowOnError extends boolean = false>(options: Options<AuthControllerRegisterData, ThrowOnError>) => {
    return (options.client ?? client).post<AuthControllerRegisterResponses, AuthControllerRegisterErrors, ThrowOnError>({
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * User login
 * Authenticate user with email and password
 */
export const authControllerLogin = <ThrowOnError extends boolean = false>(options: Options<AuthControllerLoginData, ThrowOnError>) => {
    return (options.client ?? client).post<AuthControllerLoginResponses, AuthControllerLoginErrors, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Exchange Google id_token for app tokens
 */
export const authControllerExchangeGoogleIdToken = <ThrowOnError extends boolean = false>(options: Options<AuthControllerExchangeGoogleIdTokenData, ThrowOnError>) => {
    return (options.client ?? client).post<AuthControllerExchangeGoogleIdTokenResponses, unknown, ThrowOnError>({
        url: '/auth/google/token',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Refresh access token
 * Get a new access token using refresh token
 */
export const authControllerRefreshToken = <ThrowOnError extends boolean = false>(options: Options<AuthControllerRefreshTokenData, ThrowOnError>) => {
    return (options.client ?? client).post<AuthControllerRefreshTokenResponses, AuthControllerRefreshTokenErrors, ThrowOnError>({
        url: '/auth/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request password reset
 * Send a password reset link to user email
 */
export const authControllerForgotPassword = <ThrowOnError extends boolean = false>(options: Options<AuthControllerForgotPasswordData, ThrowOnError>) => {
    return (options.client ?? client).post<AuthControllerForgotPasswordResponses, AuthControllerForgotPasswordErrors, ThrowOnError>({
        url: '/auth/forgot-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reset password
 * Reset user password using reset token
 */
export const authControllerResetPassword = <ThrowOnError extends boolean = false>(options: Options<AuthControllerResetPasswordData, ThrowOnError>) => {
    return (options.client ?? client).post<AuthControllerResetPasswordResponses, AuthControllerResetPasswordErrors, ThrowOnError>({
        url: '/auth/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request email verification
 * Request email verification token
 */
export const authControllerRequestEmailVerification = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerRequestEmailVerificationData, ThrowOnError>) => {
    return (options?.client ?? client).post<AuthControllerRequestEmailVerificationResponses, unknown, ThrowOnError>({
        url: '/auth/request-email-verification',
        ...options
    });
};

/**
 * Verify email
 * Verify user email using verification token
 */
export const authControllerVerifyEmail = <ThrowOnError extends boolean = false>(options: Options<AuthControllerVerifyEmailData, ThrowOnError>) => {
    return (options.client ?? client).get<AuthControllerVerifyEmailResponses, AuthControllerVerifyEmailErrors, ThrowOnError>({
        url: '/auth/verify-email',
        ...options
    });
};

/**
 * Check to see if user exists
 * Throws an error if user does exist.
 */
export const authControllerCheckUser = <ThrowOnError extends boolean = false>(options: Options<AuthControllerCheckUserData, ThrowOnError>) => {
    return (options.client ?? client).get<AuthControllerCheckUserResponses, unknown, ThrowOnError>({
        url: '/auth/check-user',
        ...options
    });
};

/**
 * Delete user account
 */
export const authControllerDeleteUser = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerDeleteUserData, ThrowOnError>) => {
    return (options?.client ?? client).delete<AuthControllerDeleteUserResponses, unknown, ThrowOnError>({
        url: '/auth/me',
        ...options
    });
};

/**
 * Get current user profile
 * Retrieve the authenticated user profile information
 */
export const authControllerGetProfile = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerGetProfileData, ThrowOnError>) => {
    return (options?.client ?? client).get<AuthControllerGetProfileResponses, AuthControllerGetProfileErrors, ThrowOnError>({
        url: '/auth/me',
        ...options
    });
};

/**
 * Update user profile
 * Update the authenticated user profile information
 */
export const authControllerUpdateProfile = <ThrowOnError extends boolean = false>(options: Options<AuthControllerUpdateProfileData, ThrowOnError>) => {
    return (options.client ?? client).patch<AuthControllerUpdateProfileResponses, AuthControllerUpdateProfileErrors, ThrowOnError>({
        url: '/auth/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Change user password
 * Change the authenticated user password
 */
export const authControllerChangePassword = <ThrowOnError extends boolean = false>(options: Options<AuthControllerChangePasswordData, ThrowOnError>) => {
    return (options.client ?? client).post<AuthControllerChangePasswordResponses, AuthControllerChangePasswordErrors, ThrowOnError>({
        url: '/auth/change-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * User logout
 * Logout the authenticated user and optionally revoke refresh token
 */
export const authControllerLogout = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerLogoutData, ThrowOnError>) => {
    return (options?.client ?? client).post<AuthControllerLogoutResponses, AuthControllerLogoutErrors, ThrowOnError>({
        url: '/auth/logout',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Verify JWT token
 * Verify if the provided JWT token is valid and return user info
 */
export const authControllerVerifyToken = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerVerifyTokenData, ThrowOnError>) => {
    return (options?.client ?? client).get<AuthControllerVerifyTokenResponses, AuthControllerVerifyTokenErrors, ThrowOnError>({
        url: '/auth/verify-token',
        ...options
    });
};

/**
 * Get user profile (legacy)
 * Retrieve the authenticated user profile information - use /auth/me instead
 * @deprecated
 */
export const authControllerGetProfileLegacy = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerGetProfileLegacyData, ThrowOnError>) => {
    return (options?.client ?? client).get<AuthControllerGetProfileLegacyResponses, AuthControllerGetProfileLegacyErrors, ThrowOnError>({
        url: '/auth/profile',
        ...options
    });
};

/**
 * Get user pupil profile
 */
export const pupilsControllerGetPupilProfile = <ThrowOnError extends boolean = false>(options?: Options<PupilsControllerGetPupilProfileData, ThrowOnError>) => {
    return (options?.client ?? client).get<PupilsControllerGetPupilProfileResponses, PupilsControllerGetPupilProfileErrors, ThrowOnError>({
        url: '/pupils/me',
        ...options
    });
};

/**
 * Update user pupil profile
 */
export const pupilsControllerUpdatePupilProfile = <ThrowOnError extends boolean = false>(options: Options<PupilsControllerUpdatePupilProfileData, ThrowOnError>) => {
    return (options.client ?? client).patch<PupilsControllerUpdatePupilProfileResponses, PupilsControllerUpdatePupilProfileErrors, ThrowOnError>({
        url: '/pupils/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get public pupil profile
 */
export const pupilsControllerGetPupilByUsername = <ThrowOnError extends boolean = false>(options: Options<PupilsControllerGetPupilByUsernameData, ThrowOnError>) => {
    return (options.client ?? client).get<PupilsControllerGetPupilByUsernameResponses, PupilsControllerGetPupilByUsernameErrors, ThrowOnError>({
        url: '/pupils/{username}',
        ...options
    });
};

/**
 * Get global pupil leaderboard
 */
export const pupilsControllerGetGlobalPupilLeaderboard = <ThrowOnError extends boolean = false>(options?: Options<PupilsControllerGetGlobalPupilLeaderboardData, ThrowOnError>) => {
    return (options?.client ?? client).get<PupilsControllerGetGlobalPupilLeaderboardResponses, PupilsControllerGetGlobalPupilLeaderboardErrors, ThrowOnError>({
        url: '/pupils/leaderboard',
        ...options
    });
};

export const pupilsControllerGetPupilLeaderBoardByPupilId = <ThrowOnError extends boolean = false>(options: Options<PupilsControllerGetPupilLeaderBoardByPupilIdData, ThrowOnError>) => {
    return (options.client ?? client).get<PupilsControllerGetPupilLeaderBoardByPupilIdResponses, PupilsControllerGetPupilLeaderBoardByPupilIdErrors, ThrowOnError>({
        url: '/pupils/leaderboard/{pupilId}',
        ...options
    });
};

/**
 * Find classrooms
 */
export const classroomsControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<ClassroomsControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<ClassroomsControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/classrooms',
        ...options
    });
};

/**
 * Create a classroom
 */
export const classroomsControllerCreate = <ThrowOnError extends boolean = false>(options: Options<ClassroomsControllerCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<ClassroomsControllerCreateResponses, unknown, ThrowOnError>({
        url: '/classrooms',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Enroll pupils
 */
export const classroomsControllerEnroll = <ThrowOnError extends boolean = false>(options: Options<ClassroomsControllerEnrollData, ThrowOnError>) => {
    return (options.client ?? client).post<ClassroomsControllerEnrollResponses, unknown, ThrowOnError>({
        url: '/classrooms/enroll',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unenroll pupils
 */
export const classroomsControllerUnEnroll = <ThrowOnError extends boolean = false>(options: Options<ClassroomsControllerUnEnrollData, ThrowOnError>) => {
    return (options.client ?? client).post<ClassroomsControllerUnEnrollResponses, unknown, ThrowOnError>({
        url: '/classrooms/unenroll',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Join classroom by code
 */
export const classroomsControllerJoin = <ThrowOnError extends boolean = false>(options: Options<ClassroomsControllerJoinData, ThrowOnError>) => {
    return (options.client ?? client).post<ClassroomsControllerJoinResponses, unknown, ThrowOnError>({
        url: '/classrooms/join',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Leave classroom
 */
export const classroomsControllerLeave = <ThrowOnError extends boolean = false>(options: Options<ClassroomsControllerLeaveData, ThrowOnError>) => {
    return (options.client ?? client).post<ClassroomsControllerLeaveResponses, unknown, ThrowOnError>({
        url: '/classrooms/leave',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete classroom by id
 */
export const classroomsControllerRemove = <ThrowOnError extends boolean = false>(options: Options<ClassroomsControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? client).delete<ClassroomsControllerRemoveResponses, unknown, ThrowOnError>({
        url: '/classrooms/{id}',
        ...options
    });
};

/**
 * Find classroom by id
 */
export const classroomsControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<ClassroomsControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? client).get<ClassroomsControllerFindOneResponses, unknown, ThrowOnError>({
        url: '/classrooms/{id}',
        ...options
    });
};

/**
 * Update classroom by id
 */
export const classroomsControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<ClassroomsControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<ClassroomsControllerUpdateResponses, unknown, ThrowOnError>({
        url: '/classrooms/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create WFL minigame
 */
export const minigamesControllerCreateWflMinigame = <ThrowOnError extends boolean = false>(options: Options<MinigamesControllerCreateWflMinigameData, ThrowOnError>) => {
    return (options.client ?? client).post<MinigamesControllerCreateWflMinigameResponses, unknown, ThrowOnError>({
        url: '/minigames/wordsFromLetters',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create Choices minigame
 */
export const minigamesControllerCreateChoicesMinigame = <ThrowOnError extends boolean = false>(options: Options<MinigamesControllerCreateChoicesMinigameData, ThrowOnError>) => {
    return (options.client ?? client).post<MinigamesControllerCreateChoicesMinigameResponses, unknown, ThrowOnError>({
        url: '/minigames/choices',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create SR minigame
 */
export const minigamesControllerCreateSrMinigame = <ThrowOnError extends boolean = false>(options: Options<MinigamesControllerCreateSrMinigameData, ThrowOnError>) => {
    return (options.client ?? client).post<MinigamesControllerCreateSrMinigameResponses, unknown, ThrowOnError>({
        url: '/minigames/sentenceRearrangement',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get 3 random minigames for a specific reading material
 */
export const minigamesControllerFindMinigamesByMaterialId = <ThrowOnError extends boolean = false>(options: Options<MinigamesControllerFindMinigamesByMaterialIdData, ThrowOnError>) => {
    return (options.client ?? client).get<MinigamesControllerFindMinigamesByMaterialIdResponses, unknown, ThrowOnError>({
        url: '/minigames/readingmaterials/{readingMaterialID}/random',
        ...options
    });
};

/**
 * Get minigame logs for session id
 */
export const minigamesControllerFindMinigamelogsByReadingSessionId = <ThrowOnError extends boolean = false>(options: Options<MinigamesControllerFindMinigamelogsByReadingSessionIdData, ThrowOnError>) => {
    return (options.client ?? client).get<MinigamesControllerFindMinigamelogsByReadingSessionIdResponses, unknown, ThrowOnError>({
        url: '/minigames/logs/{readingSessionID}',
        ...options
    });
};

/**
 * Update log for SentenceRearrangement
 */
export const minigamesControllerUpdateSentenceRearrangementLog = <ThrowOnError extends boolean = false>(options: Options<MinigamesControllerUpdateSentenceRearrangementLogData, ThrowOnError>) => {
    return (options.client ?? client).patch<MinigamesControllerUpdateSentenceRearrangementLogResponses, unknown, ThrowOnError>({
        url: '/minigames/logs/SentenceRearrangement',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a log for SentenceRearrangement minigame
 */
export const minigamesControllerCreateSentenceRearrangementLog = <ThrowOnError extends boolean = false>(options: Options<MinigamesControllerCreateSentenceRearrangementLogData, ThrowOnError>) => {
    return (options.client ?? client).post<MinigamesControllerCreateSentenceRearrangementLogResponses, unknown, ThrowOnError>({
        url: '/minigames/logs/SentenceRearrangement',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update log for Choices
 */
export const minigamesControllerUpdateChoicesLog = <ThrowOnError extends boolean = false>(options: Options<MinigamesControllerUpdateChoicesLogData, ThrowOnError>) => {
    return (options.client ?? client).patch<MinigamesControllerUpdateChoicesLogResponses, unknown, ThrowOnError>({
        url: '/minigames/logs/Choices',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a log for Choices minigame
 */
export const minigamesControllerCreateChoicesLog = <ThrowOnError extends boolean = false>(options: Options<MinigamesControllerCreateChoicesLogData, ThrowOnError>) => {
    return (options.client ?? client).post<MinigamesControllerCreateChoicesLogResponses, unknown, ThrowOnError>({
        url: '/minigames/logs/Choices',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update log for WordsFromLetters
 */
export const minigamesControllerUpdateWordsFromLettersLog = <ThrowOnError extends boolean = false>(options: Options<MinigamesControllerUpdateWordsFromLettersLogData, ThrowOnError>) => {
    return (options.client ?? client).patch<MinigamesControllerUpdateWordsFromLettersLogResponses, unknown, ThrowOnError>({
        url: '/minigames/logs/WordsFromLetters',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a log for WordsFromLetters minigame
 */
export const minigamesControllerCreateWordsFromLettersLog = <ThrowOnError extends boolean = false>(options: Options<MinigamesControllerCreateWordsFromLettersLogData, ThrowOnError>) => {
    return (options.client ?? client).post<MinigamesControllerCreateWordsFromLettersLogResponses, unknown, ThrowOnError>({
        url: '/minigames/logs/WordsFromLetters',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get saved minigames for a specific reading session
 */
export const minigamesControllerFindMinigamesBySessionId = <ThrowOnError extends boolean = false>(options: Options<MinigamesControllerFindMinigamesBySessionIdData, ThrowOnError>) => {
    return (options.client ?? client).get<MinigamesControllerFindMinigamesBySessionIdResponses, unknown, ThrowOnError>({
        url: '/minigames/sessions/{readingSessionID}',
        ...options
    });
};

/**
 * Get 3 random minigames for a specific reading session
 */
export const minigamesControllerFindRandomMinigamesBySessionId = <ThrowOnError extends boolean = false>(options: Options<MinigamesControllerFindRandomMinigamesBySessionIdData, ThrowOnError>) => {
    return (options.client ?? client).get<MinigamesControllerFindRandomMinigamesBySessionIdResponses, unknown, ThrowOnError>({
        url: '/minigames/{readingSessionID}/random',
        ...options
    });
};

/**
 * Get WordsFromLetters minigame for a specific reading material
 */
export const minigamesControllerFindWordsFromLettersMinigame = <ThrowOnError extends boolean = false>(options: Options<MinigamesControllerFindWordsFromLettersMinigameData, ThrowOnError>) => {
    return (options.client ?? client).get<MinigamesControllerFindWordsFromLettersMinigameResponses, unknown, ThrowOnError>({
        url: '/minigames/{readingMaterialID}/wordsFromLetters',
        ...options
    });
};

/**
 * Create a completion status of minigames for a specific reading session
 */
export const minigamesControllerGetMinigamesCompletion = <ThrowOnError extends boolean = false>(options: Options<MinigamesControllerGetMinigamesCompletionData, ThrowOnError>) => {
    return (options.client ?? client).post<MinigamesControllerGetMinigamesCompletionResponses, unknown, ThrowOnError>({
        url: '/minigames/{readingSessionID}/complete',
        ...options
    });
};

/**
 * Get all reading sessions
 */
export const readingSessionsControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<ReadingSessionsControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadingSessionsControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/reading-sessions',
        ...options
    });
};

/**
 * Create a reading session
 */
export const readingSessionsControllerCreate = <ThrowOnError extends boolean = false>(options: Options<ReadingSessionsControllerCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<ReadingSessionsControllerCreateResponses, unknown, ThrowOnError>({
        url: '/reading-sessions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a reading session by id
 */
export const readingSessionsControllerRemove = <ThrowOnError extends boolean = false>(options: Options<ReadingSessionsControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? client).delete<ReadingSessionsControllerRemoveResponses, unknown, ThrowOnError>({
        url: '/reading-sessions/{id}',
        ...options
    });
};

/**
 * Get a reading session by id
 */
export const readingSessionsControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<ReadingSessionsControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadingSessionsControllerFindOneResponses, unknown, ThrowOnError>({
        url: '/reading-sessions/{id}',
        ...options
    });
};

/**
 * Update a reading session by id
 */
export const readingSessionsControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<ReadingSessionsControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<ReadingSessionsControllerUpdateResponses, unknown, ThrowOnError>({
        url: '/reading-sessions/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all reading materials
 */
export const readingMaterialsControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<ReadingMaterialsControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadingMaterialsControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/reading-materials',
        ...options
    });
};

/**
 * Create a reading material
 */
export const readingMaterialsControllerCreate = <ThrowOnError extends boolean = false>(options: Options<ReadingMaterialsControllerCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<ReadingMaterialsControllerCreateResponses, unknown, ThrowOnError>({
        url: '/reading-materials',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get recommended reading materials for the pupil
 */
export const readingMaterialsControllerFindRecommendations = <ThrowOnError extends boolean = false>(options?: Options<ReadingMaterialsControllerFindRecommendationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadingMaterialsControllerFindRecommendationsResponses, unknown, ThrowOnError>({
        url: '/reading-materials/recommendations',
        ...options
    });
};

/**
 * Get a reading material by id
 */
export const readingMaterialsControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<ReadingMaterialsControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadingMaterialsControllerFindOneResponses, unknown, ThrowOnError>({
        url: '/reading-materials/{id}',
        ...options
    });
};

/**
 * Get all Genres
 */
export const genresControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<GenresControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<GenresControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/genres',
        ...options
    });
};

/**
 * Create Genre
 */
export const genresControllerCreate = <ThrowOnError extends boolean = false>(options: Options<GenresControllerCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<GenresControllerCreateResponses, unknown, ThrowOnError>({
        url: '/genres',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get pupil achievements
 */
export const achievementsControllerGetPupilAchievements = <ThrowOnError extends boolean = false>(options?: Options<AchievementsControllerGetPupilAchievementsData, ThrowOnError>) => {
    return (options?.client ?? client).get<AchievementsControllerGetPupilAchievementsResponses, unknown, ThrowOnError>({
        url: '/achievements',
        ...options
    });
};

/**
 * Add pupil achievement
 */
export const achievementsControllerAddPupilAchievement = <ThrowOnError extends boolean = false>(options: Options<AchievementsControllerAddPupilAchievementData, ThrowOnError>) => {
    return (options.client ?? client).post<AchievementsControllerAddPupilAchievementResponses, unknown, ThrowOnError>({
        url: '/achievements/pupil/{pupilId}/achievement/{achievementName}',
        ...options
    });
};

/**
 * Get achievements for specific pupil (admin/testing)
 */
export const achievementsControllerGetPupilAchievementsById = <ThrowOnError extends boolean = false>(options: Options<AchievementsControllerGetPupilAchievementsByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<AchievementsControllerGetPupilAchievementsByIdResponses, unknown, ThrowOnError>({
        url: '/achievements/pupils/{pupilId}',
        ...options
    });
};

/**
 * Remove specific achievement from specific pupil
 */
export const achievementsControllerRemovePupilAchievement = <ThrowOnError extends boolean = false>(options: Options<AchievementsControllerRemovePupilAchievementData, ThrowOnError>) => {
    return (options.client ?? client).delete<AchievementsControllerRemovePupilAchievementResponses, unknown, ThrowOnError>({
        url: '/achievements/pupils/{pupilId}/achievements/{achievementId}',
        ...options
    });
};

/**
 * Delete achievement by id (safety measure)
 */
export const achievementsControllerRemove = <ThrowOnError extends boolean = false>(options: Options<AchievementsControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? client).delete<AchievementsControllerRemoveResponses, unknown, ThrowOnError>({
        url: '/achievements/{id}',
        ...options
    });
};

/**
 * Get all Activities by Classroom
 */
export const activityControllerFindAllByClassroomId = <ThrowOnError extends boolean = false>(options: Options<ActivityControllerFindAllByClassroomIdData, ThrowOnError>) => {
    return (options.client ?? client).get<ActivityControllerFindAllByClassroomIdResponses, unknown, ThrowOnError>({
        url: '/classrooms/{classroomId}/activity',
        ...options
    });
};

/**
 * Create Activity
 */
export const activityControllerCreate = <ThrowOnError extends boolean = false>(options: Options<ActivityControllerCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<ActivityControllerCreateResponses, unknown, ThrowOnError>({
        url: '/classrooms/{classroomId}/activity',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Activity
 */
export const activityControllerRemove = <ThrowOnError extends boolean = false>(options: Options<ActivityControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? client).delete<ActivityControllerRemoveResponses, unknown, ThrowOnError>({
        url: '/classrooms/{classroomId}/activity/{activityId}',
        ...options
    });
};

/**
 * Get Activity by id
 */
export const activityControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<ActivityControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? client).get<ActivityControllerFindOneResponses, unknown, ThrowOnError>({
        url: '/classrooms/{classroomId}/activity/{activityId}',
        ...options
    });
};

/**
 * Update Activity
 */
export const activityControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<ActivityControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<ActivityControllerUpdateResponses, unknown, ThrowOnError>({
        url: '/classrooms/{classroomId}/activity/{activityId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get user login streak
 */
export const userControllerGetLoginStreak = <ThrowOnError extends boolean = false>(options?: Options<UserControllerGetLoginStreakData, ThrowOnError>) => {
    return (options?.client ?? client).get<UserControllerGetLoginStreakResponses, unknown, ThrowOnError>({
        url: '/user/me/streak',
        ...options
    });
};

/**
 * Update user login streak
 */
export const userControllerUpdateLoginStreak = <ThrowOnError extends boolean = false>(options?: Options<UserControllerUpdateLoginStreakData, ThrowOnError>) => {
    return (options?.client ?? client).put<UserControllerUpdateLoginStreakResponses, unknown, ThrowOnError>({
        url: '/user/me/streak',
        ...options
    });
};

/**
 * Get total user sessions
 */
export const userControllerGetTotalSessions = <ThrowOnError extends boolean = false>(options?: Options<UserControllerGetTotalSessionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<UserControllerGetTotalSessionsResponses, unknown, ThrowOnError>({
        url: '/user/me/sessions',
        ...options
    });
};

/**
 * Create a new user session
 */
export const userControllerCreateSession = <ThrowOnError extends boolean = false>(options?: Options<UserControllerCreateSessionData, ThrowOnError>) => {
    return (options?.client ?? client).post<UserControllerCreateSessionResponses, unknown, ThrowOnError>({
        url: '/user/me/sessions',
        ...options
    });
};

/**
 * End a user session
 */
export const userControllerEndSession = <ThrowOnError extends boolean = false>(options: Options<UserControllerEndSessionData, ThrowOnError>) => {
    return (options.client ?? client).put<UserControllerEndSessionResponses, unknown, ThrowOnError>({
        url: '/user/me/sessions/{sessionId}',
        ...options
    });
};

/**
 * Search users by name and role
 */
export const userControllerSearchUsers = <ThrowOnError extends boolean = false>(options: Options<UserControllerSearchUsersData, ThrowOnError>) => {
    return (options.client ?? client).get<UserControllerSearchUsersResponses, unknown, ThrowOnError>({
        url: '/user/search',
        ...options
    });
};

/**
 * Get an Activity's Activity Logs
 */
export const activityLogsControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<ActivityLogsControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? client).get<ActivityLogsControllerFindOneResponses, unknown, ThrowOnError>({
        url: '/classroom/activity-logs/{activityId}',
        ...options
    });
};

/**
 * Create Activity Log
 */
export const activityLogsControllerCreate = <ThrowOnError extends boolean = false>(options: Options<ActivityLogsControllerCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<ActivityLogsControllerCreateResponses, unknown, ThrowOnError>({
        url: '/classroom/activity-logs/{activityId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all Classroom Acitivies' Activity Log
 */
export const activityLogsControllerFindAll = <ThrowOnError extends boolean = false>(options: Options<ActivityLogsControllerFindAllData, ThrowOnError>) => {
    return (options.client ?? client).get<ActivityLogsControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/classroom/activity-logs/{activityId}/classroom/{classroomId}/activity-logs',
        ...options
    });
};

/**
 * Get definition of word
 */
export const dictionaryControllerDefinition = <ThrowOnError extends boolean = false>(options: Options<DictionaryControllerDefinitionData, ThrowOnError>) => {
    return (options.client ?? client).get<DictionaryControllerDefinitionResponses, unknown, ThrowOnError>({
        url: '/dictionary/dictionary/{word}',
        ...options
    });
};

/**
 * Upload image to ImageKit
 */
export const imagekitControllerUploadImage = <ThrowOnError extends boolean = false>(options?: Options<ImagekitControllerUploadImageData, ThrowOnError>) => {
    return (options?.client ?? client).post<ImagekitControllerUploadImageResponses, unknown, ThrowOnError>({
        url: '/upload/image',
        ...options
    });
};
