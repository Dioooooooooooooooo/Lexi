// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetResponse, GetHealthResponse, PostAuthRegisterData, PostAuthRegisterResponse, PostAuthLoginData, PostAuthLoginResponse, PostAuthRefreshData, PostAuthRefreshResponse, PostAuthForgotPasswordData, PostAuthForgotPasswordResponse, PostAuthResetPasswordData, PostAuthResetPasswordResponse, PostAuthRequestEmailVerificationResponse, GetAuthVerifyEmailData, GetAuthVerifyEmailResponse, GetAuthMeResponse, PatchAuthMeData, PatchAuthMeResponse, PostAuthChangePasswordData, PostAuthChangePasswordResponse, PostAuthLogoutData, PostAuthLogoutResponse, GetAuthVerifyTokenResponse, GetAuthDebugLoginByEmailData, GetAuthDebugLoginByEmailResponse, GetAuthDebugDbResponse, GetAuthCheckUserData, GetAuthCheckUserResponse, GetAuthProfileResponse, GetPupilsMeResponse, PatchPupilsMeData, PatchPupilsMeResponse, GetPupilsLeaderboardResponse, GetPupilsLeaderboardByPupilIdResponse, GetPupilsByUsernameData, GetPupilsByUsernameResponse, PostClassroomsData, PostClassroomsResponse, GetClassroomsResponse, GetClassroomsByIdData, GetClassroomsByIdResponse, PatchClassroomsByIdData, PatchClassroomsByIdResponse, DeleteClassroomsByIdData, DeleteClassroomsByIdResponse, GetMinigamesReadingmaterialsByReadingMaterialIdRandomData, GetMinigamesReadingmaterialsByReadingMaterialIdRandomResponse, GetMinigamesByReadingSessionIdRandomData, GetMinigamesByReadingSessionIdRandomResponse, GetMinigamesByReadingMaterialIdWordsFromLettersData, GetMinigamesByReadingMaterialIdWordsFromLettersResponse, PostMinigamesByReadingSessionIdCompleteData, PostMinigamesByReadingSessionIdCompleteResponse, PostMinigamesLogsSentenceRearrangementData, PostMinigamesLogsSentenceRearrangementResponse, PostMinigamesLogsChoicesData, PostMinigamesLogsChoicesResponse, PostMinigamesLogsWordsFromLettersData, PostMinigamesLogsWordsFromLettersResponse } from './types.gen';

export class HealthService {
    /**
     * @returns unknown
     * @throws ApiError
     */
    public static get(): CancelablePromise<GetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/'
        });
    }
    
    /**
     * @returns unknown
     * @throws ApiError
     */
    public static getHealth(): CancelablePromise<GetHealthResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/health'
        });
    }
    
}

export class AuthenticationService {
    /**
     * Register a new user
     * Create a new user account with email and password
     * @param data The data for the request.
     * @param data.requestBody User registration data
     * @returns AuthResponseDto User successfully registered
     * @throws ApiError
     */
    public static postAuthRegister(data: PostAuthRegisterData): CancelablePromise<PostAuthRegisterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/auth/register',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid input data',
                409: 'User already exists'
            }
        });
    }
    
    /**
     * User login
     * Authenticate user with email and password
     * @param data The data for the request.
     * @param data.requestBody User login credentials
     * @returns SuccessResponseDto User successfully logged in
     * @throws ApiError
     */
    public static postAuthLogin(data: PostAuthLoginData): CancelablePromise<PostAuthLoginResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/auth/login',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid input data',
                401: 'Invalid credentials'
            }
        });
    }
    
    /**
     * Refresh access token
     * Get a new access token using refresh token
     * @param data The data for the request.
     * @param data.requestBody Refresh token
     * @returns SuccessResponseDto Token refreshed successfully
     * @throws ApiError
     */
    public static postAuthRefresh(data: PostAuthRefreshData): CancelablePromise<PostAuthRefreshResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/auth/refresh',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Invalid refresh token'
            }
        });
    }
    
    /**
     * Request password reset
     * Send a password reset link to user email
     * @param data The data for the request.
     * @param data.requestBody User email for password reset
     * @returns SuccessResponseDto Password reset email sent (if email exists)
     * @throws ApiError
     */
    public static postAuthForgotPassword(data: PostAuthForgotPasswordData): CancelablePromise<PostAuthForgotPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/auth/forgot-password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid input data'
            }
        });
    }
    
    /**
     * Reset password
     * Reset user password using reset token
     * @param data The data for the request.
     * @param data.requestBody Reset token and new password
     * @returns SuccessResponseDto Password reset successfully
     * @throws ApiError
     */
    public static postAuthResetPassword(data: PostAuthResetPasswordData): CancelablePromise<PostAuthResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/auth/reset-password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid or expired reset token'
            }
        });
    }
    
    /**
     * Request email verification
     * Request email verification token
     * @returns SuccessResponseDto Email verication sent.
     * @throws ApiError
     */
    public static postAuthRequestEmailVerification(): CancelablePromise<PostAuthRequestEmailVerificationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/auth/request-email-verification'
        });
    }
    
    /**
     * Verify email
     * Verify user email using verification token
     * @param data The data for the request.
     * @param data.token Email verification token
     * @returns SuccessResponseDto Email verified successfully
     * @throws ApiError
     */
    public static getAuthVerifyEmail(data: GetAuthVerifyEmailData): CancelablePromise<GetAuthVerifyEmailResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/auth/verify-email',
            query: {
                token: data.token
            },
            errors: {
                400: 'Invalid or expired verification token'
            }
        });
    }
    
    /**
     * Get current user profile
     * Retrieve the authenticated user profile information
     * @returns SuccessResponseDto User profile retrieved successfully
     * @throws ApiError
     */
    public static getAuthMe(): CancelablePromise<GetAuthMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/auth/me',
            errors: {
                401: 'Invalid or missing token'
            }
        });
    }
    
    /**
     * Update user profile
     * Update the authenticated user profile information
     * @param data The data for the request.
     * @param data.requestBody Profile update data
     * @returns SuccessResponseDto Profile updated successfully
     * @throws ApiError
     */
    public static patchAuthMe(data: PatchAuthMeData): CancelablePromise<PatchAuthMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/auth/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Invalid or missing token',
                409: 'Email already exists'
            }
        });
    }
    
    /**
     * Change user password
     * Change the authenticated user password
     * @param data The data for the request.
     * @param data.requestBody Current and new password
     * @returns SuccessResponseDto Password changed successfully
     * @throws ApiError
     */
    public static postAuthChangePassword(data: PostAuthChangePasswordData): CancelablePromise<PostAuthChangePasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/auth/change-password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Invalid or missing token / Current password incorrect'
            }
        });
    }
    
    /**
     * User logout
     * Logout the authenticated user and optionally revoke refresh token
     * @param data The data for the request.
     * @param data.requestBody Optional refresh token to revoke
     * @returns SuccessResponseDto User successfully logged out
     * @throws ApiError
     */
    public static postAuthLogout(data: PostAuthLogoutData = {}): CancelablePromise<PostAuthLogoutResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/auth/logout',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Invalid or missing token'
            }
        });
    }
    
    /**
     * Verify JWT token
     * Verify if the provided JWT token is valid and return user info
     * @returns unknown Token is valid
     * @throws ApiError
     */
    public static getAuthVerifyToken(): CancelablePromise<GetAuthVerifyTokenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/auth/verify-token',
            errors: {
                401: 'Invalid or expired token'
            }
        });
    }
    
    /**
     * Debug login issues
     * Check if user and auth provider exist for debugging
     * @param data The data for the request.
     * @param data.email
     * @returns unknown
     * @throws ApiError
     */
    public static getAuthDebugLoginByEmail(data: GetAuthDebugLoginByEmailData): CancelablePromise<GetAuthDebugLoginByEmailResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/auth/debug-login/{email}',
            path: {
                email: data.email
            }
        });
    }
    
    /**
     * Debug database connection
     * Check if database tables exist and are accessible
     * @returns unknown
     * @throws ApiError
     */
    public static getAuthDebugDb(): CancelablePromise<GetAuthDebugDbResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/auth/debug-db'
        });
    }
    
    /**
     * Check if user exists
     * Check if a user exists by email or username
     * @param data The data for the request.
     * @param data.fieldType Type of field to check (email or username)
     * @param data.fieldValue Value to check
     * @returns SuccessResponseDto Field is available
     * @throws ApiError
     */
    public static getAuthCheckUser(data: GetAuthCheckUserData): CancelablePromise<GetAuthCheckUserResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/auth/check-user',
            query: {
                fieldType: data.fieldType,
                fieldValue: data.fieldValue
            },
            errors: {
                400: 'Invalid field type or missing parameters',
                409: 'Field already exists'
            }
        });
    }
    
    /**
     * @deprecated
     * Get user profile (legacy)
     * Retrieve the authenticated user profile information - use /auth/me instead
     * @returns UserResponseDto User profile retrieved successfully
     * @throws ApiError
     */
    public static getAuthProfile(): CancelablePromise<GetAuthProfileResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/auth/profile',
            errors: {
                401: 'Invalid or missing token'
            }
        });
    }
    
}

export class PupilsService {
    /**
     * Get user pupil profile
     * @returns SuccessResponseDto Pupil profile successfully fetched
     * @throws ApiError
     */
    public static getPupilsMe(): CancelablePromise<GetPupilsMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/pupils/me',
            errors: {
                401: 'Invalid credentials'
            }
        });
    }
    
    /**
     * Update user pupil profile
     * @param data The data for the request.
     * @param data.requestBody Pupil profile update data
     * @returns SuccessResponseDto Pupil profile successfully updated
     * @throws ApiError
     */
    public static patchPupilsMe(data: PatchPupilsMeData): CancelablePromise<PatchPupilsMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/pupils/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Invalid credentials'
            }
        });
    }
    
    /**
     * Get global pupil leaderboard
     * @returns SuccessResponseDto Global pupil leaderboard successfully fetched
     * @throws ApiError
     */
    public static getPupilsLeaderboard(): CancelablePromise<GetPupilsLeaderboardResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/pupils/leaderboard',
            errors: {
                401: 'Invalid credentials'
            }
        });
    }
    
    /**
     * Get pupil leaderboard by pupil ID
     * @returns SuccessResponseDto Pupil leaderboard successfully fetched
     * @throws ApiError
     */
    public static getPupilsLeaderboardByPupilId(): CancelablePromise<GetPupilsLeaderboardByPupilIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/pupils/leaderboard/{pupilId}',
            errors: {
                401: 'Invalid credentials'
            }
        });
    }
    
    /**
     * Get public pupil profile
     * @param data The data for the request.
     * @param data.username
     * @returns SuccessResponseDto Pupil profile successfully fetched
     * @throws ApiError
     */
    public static getPupilsByUsername(data: GetPupilsByUsernameData): CancelablePromise<GetPupilsByUsernameResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/pupils/{username}',
            path: {
                username: data.username
            },
            errors: {
                401: 'Invalid credentials'
            }
        });
    }
    
}

export class ClassroomsService {
    /**
     * Create classroom
     * Create classroom with its name and description
     * @param data The data for the request.
     * @param data.requestBody Create classroom data
     * @returns SuccessResponseDto Classroom created successfully
     * @throws ApiError
     */
    public static postClassrooms(data: PostClassroomsData): CancelablePromise<PostClassroomsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/classrooms',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Invalid or missing token'
            }
        });
    }
    
    /**
     * @returns unknown
     * @throws ApiError
     */
    public static getClassrooms(): CancelablePromise<GetClassroomsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/classrooms'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown
     * @throws ApiError
     */
    public static getClassroomsById(data: GetClassroomsByIdData): CancelablePromise<GetClassroomsByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/classrooms/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static patchClassroomsById(data: PatchClassroomsByIdData): CancelablePromise<PatchClassroomsByIdResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/classrooms/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown
     * @throws ApiError
     */
    public static deleteClassroomsById(data: DeleteClassroomsByIdData): CancelablePromise<DeleteClassroomsByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/classrooms/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class MinigamesService {
    /**
     * Get 3 random minigames for a specific reading material
     * @param data The data for the request.
     * @param data.readingMaterialId
     * @returns unknown
     * @throws ApiError
     */
    public static getMinigamesReadingmaterialsByReadingMaterialIdRandom(data: GetMinigamesReadingmaterialsByReadingMaterialIdRandomData): CancelablePromise<GetMinigamesReadingmaterialsByReadingMaterialIdRandomResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/minigames/readingmaterials/{readingMaterialID}/random',
            path: {
                readingMaterialID: data.readingMaterialId
            }
        });
    }
    
    /**
     * Get 3 random minigames for a specific reading session
     * @param data The data for the request.
     * @param data.readingSessionId
     * @returns unknown
     * @throws ApiError
     */
    public static getMinigamesByReadingSessionIdRandom(data: GetMinigamesByReadingSessionIdRandomData): CancelablePromise<GetMinigamesByReadingSessionIdRandomResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/minigames/{readingSessionID}/random',
            path: {
                readingSessionID: data.readingSessionId
            }
        });
    }
    
    /**
     * Get WordsFromLetters minigame for a specific reading material
     * @param data The data for the request.
     * @param data.readingMaterialId
     * @returns unknown
     * @throws ApiError
     */
    public static getMinigamesByReadingMaterialIdWordsFromLetters(data: GetMinigamesByReadingMaterialIdWordsFromLettersData): CancelablePromise<GetMinigamesByReadingMaterialIdWordsFromLettersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/minigames/{readingMaterialID}/wordsFromLetters',
            path: {
                readingMaterialID: data.readingMaterialId
            }
        });
    }
    
    /**
     * Create a completion status of minigames for a specific reading session
     * @param data The data for the request.
     * @param data.readingSessionId
     * @returns unknown
     * @throws ApiError
     */
    public static postMinigamesByReadingSessionIdComplete(data: PostMinigamesByReadingSessionIdCompleteData): CancelablePromise<PostMinigamesByReadingSessionIdCompleteResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/minigames/{readingSessionID}/complete',
            path: {
                readingSessionID: data.readingSessionId
            }
        });
    }
    
    /**
     * Create a log for SentenceRearrangement minigame
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static postMinigamesLogsSentenceRearrangement(data: PostMinigamesLogsSentenceRearrangementData): CancelablePromise<PostMinigamesLogsSentenceRearrangementResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/minigames/logs/SentenceRearrangement',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Create a log for Choices minigame
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static postMinigamesLogsChoices(data: PostMinigamesLogsChoicesData): CancelablePromise<PostMinigamesLogsChoicesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/minigames/logs/Choices',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Create a log for WordsFromLetters minigame
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static postMinigamesLogsWordsFromLetters(data: PostMinigamesLogsWordsFromLettersData): CancelablePromise<PostMinigamesLogsWordsFromLettersResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/minigames/logs/WordsFromLetters',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}