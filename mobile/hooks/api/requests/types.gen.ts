// This file is auto-generated by @hey-api/openapi-ts

export type RegisterDto = {
    /**
     * Username
     */
    username: string;
    /**
     * User first name
     */
    first_name: string;
    /**
     * User last name
     */
    last_name: string;
    /**
     * User email
     */
    email: string;
    /**
     * User password
     */
    password: string;
    /**
     * Password confirmation
     */
    confirm_password: string;
    /**
     * User role
     */
    role: 'Pupil' | 'Teacher';
};

export type UserResponseDto = {
    /**
     * User ID
     */
    id: string;
    /**
     * Email
     */
    email: string | null;
    /**
     * First name
     */
    first_name: string | null;
    /**
     * Last name
     */
    last_name: string | null;
    /**
     * User role
     */
    role: string | null;
    /**
     * Created at
     */
    created_at?: string;
    /**
     * Created at
     */
    updated_at?: string;
};

export type AuthResponseDto = {
    /**
     * Access token
     */
    access_token: string;
    /**
     * User info
     */
    user: UserResponseDto;
    /**
     * Refresh token
     */
    refresh_token?: string;
};

export type ErrorResponseDto = {
    message: string;
    /**
     * Detailed error, if any
     */
    error?: string;
};

export type LoginDto = {
    /**
     * User email
     */
    email: string;
    /**
     * User password
     */
    password: string;
};

export type SuccessResponseDto = {
    /**
     * Response status
     */
    status: string;
    message: string;
    /**
     * Response data
     */
    data: {
        [key: string]: unknown;
    };
};

export type GoogleExchangeTokenDto = {
    /**
     * Google ID Token
     */
    id_token: string;
};

export type RefreshTokenDto = {
    /**
     * Refresh token
     */
    refresh_token: string;
};

export type ForgotPasswordDto = {
    /**
     * User email
     */
    email: string;
};

export type ResetPasswordDto = {
    /**
     * Reset token
     */
    token: string;
    /**
     * New password
     */
    new_password: string;
};

export type UpdateProfileDto = {
    /**
     * Username
     */
    username?: string;
    /**
     * First name
     */
    first_name?: string;
    /**
     * Last name
     */
    last_name?: string;
    /**
     * Email address
     */
    email?: string;
    /**
     * Avatar
     */
    avatar?: string;
};

export type ChangePasswordDto = {
    /**
     * Current password
     */
    current_password: string;
    /**
     * New password
     */
    new_password: string;
};

export type UpdatePupilProfileDto = {
    /**
     * Age
     */
    age: number;
    /**
     * Grade Level
     */
    grade_level: number;
};

export type CreateClassroomDto = {
    /**
     * Classroom Name
     */
    name: string;
    /**
     * Classroom Name
     */
    description: string;
};

export type EnrollPupilDto = {
    /**
     * Classroom Id
     */
    classroom_id: string;
    /**
     * Array of Pupil Ids
     */
    pupil_ids: Array<string>;
};

export type UnEnrollPupilDto = {
    /**
     * Classroom Id
     */
    classroom_id: string;
    /**
     * Array of Pupil Ids
     */
    pupil_ids: Array<string>;
};

export type JoinClassroomDto = {
    /**
     * Classroom Code
     */
    code: string;
};

export type LeaveClassroomDto = {
    /**
     * Classroom Id
     */
    classroom_id: string;
};

export type UpdateClassroomDto = {
    /**
     * Classroom Name
     */
    name?: string;
    /**
     * Classroom Name
     */
    description?: string;
};

export type CreateWordsFromLettersGame = {
    /**
     * Reading Material Id
     */
    reading_material_id: string;
    /**
     * Part number of where the minigame appears in the story. Always 10 for WordsFromLetters.
     */
    part_num: number;
    /**
     * Contains the letters needed in creating words.
     */
    letters: Array<string>;
    /**
     * Words that can be created from the letters list.
     */
    words: Array<string>;
};

export type ChoicesObject = {
    /**
     * Choice text
     */
    choice: string;
    /**
     * Whether this choice is correct
     */
    answer: boolean;
};

export type CreateChoicesGame = {
    /**
     * Reading Material Id
     */
    reading_material_id: string;
    /**
     * Part number of where the minigame appears in the story.
     */
    part_num: number;
    /**
     * Question
     */
    question: string;
    /**
     * List of choices.
     */
    choices: Array<ChoicesObject>;
    /**
     * Explanation of the answer.
     */
    explanation: string;
};

export type CreateSentenceRearrangementGame = {
    /**
     * Reading Material Id
     */
    reading_material_id: string;
    /**
     * Part number of where the minigame appears in the story.
     */
    part_num: number;
    /**
     * List of correct answers.
     */
    correct_answer: Array<string>;
    /**
     * Sentence parts
     */
    parts: Array<string>;
    /**
     * Explanation of the answer.
     */
    explanation: string;
};

export type CreateMinigameLogDto = {
    /**
     * Minigame ID
     */
    minigame_id: string;
    /**
     * Pupil ID
     */
    pupil_id: string;
    /**
     * Reading Session ID
     */
    reading_session_id: string;
    /**
     * Minigame Result in JSON format
     */
    result: string;
};

export type UpdateMinigameLogDto = {
    /**
     * Minigame ID
     */
    minigame_id: string;
    /**
     * Pupil ID
     */
    pupil_id: string;
    /**
     * Reading Session ID
     */
    reading_session_id: string;
    /**
     * Minigame Result in JSON format
     */
    result: string;
};

export type CreateReadingSessionDto = {
    /**
     * Reading material id
     */
    reading_material_id: string;
};

export type UpdateReadingSessionDto = {
    /**
     * Completion percentage of the reading session
     */
    completion_percentage: number;
};

export type CreateReadingMaterialDto = {
    /**
     * Source of the reading material
     */
    is_deped: boolean;
    /**
     * Title of the reading material
     */
    title: string;
    /**
     * Author of the reading material
     */
    author: string;
    /**
     * Description of the reading material
     */
    description: string;
    /**
     * Grade level for which the reading material is suitable
     */
    grade_level: number;
    /**
     * Cover link image URL for the reading material
     */
    cover: string;
    /**
     * List of genre for the reading material
     */
    genres: Array<string>;
    /**
     * Content of the reading material
     */
    content: string;
};

export type CreateGenreDto = {
    /**
     * Name of the genre
     */
    name: string;
};

export type CreateActivityDto = {
    /**
     * Activity Name
     */
    title: string;
    /**
     * Description on what the activity is about
     */
    description?: string;
    reading_material_id: string;
};

export type UpdateActivityDto = {
    /**
     * Activity Name
     */
    title?: string;
    /**
     * Description on what the activity is about
     */
    description?: string;
    reading_material_id?: string;
};

export type CreateActivityLogDto = {
    /**
     * Minigame log Id
     */
    minigame_log_id: string;
};

export type AuthControllerRegisterData = {
    /**
     * User registration data
     */
    body: RegisterDto;
    path?: never;
    query?: never;
    url: '/auth/register';
};

export type AuthControllerRegisterErrors = {
    /**
     * Invalid input data
     */
    400: ErrorResponseDto;
    /**
     * User already exists
     */
    409: ErrorResponseDto;
};

export type AuthControllerRegisterError = AuthControllerRegisterErrors[keyof AuthControllerRegisterErrors];

export type AuthControllerRegisterResponses = {
    /**
     * User successfully registered
     */
    201: AuthResponseDto;
};

export type AuthControllerRegisterResponse = AuthControllerRegisterResponses[keyof AuthControllerRegisterResponses];

export type AuthControllerLoginData = {
    /**
     * User login credentials
     */
    body: LoginDto;
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type AuthControllerLoginErrors = {
    /**
     * Invalid input data
     */
    400: ErrorResponseDto;
    /**
     * Invalid credentials
     */
    401: ErrorResponseDto;
};

export type AuthControllerLoginError = AuthControllerLoginErrors[keyof AuthControllerLoginErrors];

export type AuthControllerLoginResponses = {
    /**
     * User successfully logged in
     */
    200: SuccessResponseDto;
};

export type AuthControllerLoginResponse = AuthControllerLoginResponses[keyof AuthControllerLoginResponses];

export type AuthControllerExchangeGoogleIdTokenData = {
    body: GoogleExchangeTokenDto;
    path?: never;
    query?: never;
    url: '/auth/google/token';
};

export type AuthControllerExchangeGoogleIdTokenResponses = {
    200: SuccessResponseDto;
};

export type AuthControllerExchangeGoogleIdTokenResponse = AuthControllerExchangeGoogleIdTokenResponses[keyof AuthControllerExchangeGoogleIdTokenResponses];

export type AuthControllerRefreshTokenData = {
    /**
     * Refresh token
     */
    body: RefreshTokenDto;
    path?: never;
    query?: never;
    url: '/auth/refresh';
};

export type AuthControllerRefreshTokenErrors = {
    /**
     * Invalid refresh token
     */
    401: ErrorResponseDto;
};

export type AuthControllerRefreshTokenError = AuthControllerRefreshTokenErrors[keyof AuthControllerRefreshTokenErrors];

export type AuthControllerRefreshTokenResponses = {
    /**
     * Token refreshed successfully
     */
    200: SuccessResponseDto;
};

export type AuthControllerRefreshTokenResponse = AuthControllerRefreshTokenResponses[keyof AuthControllerRefreshTokenResponses];

export type AuthControllerForgotPasswordData = {
    /**
     * User email for password reset
     */
    body: ForgotPasswordDto;
    path?: never;
    query?: never;
    url: '/auth/forgot-password';
};

export type AuthControllerForgotPasswordErrors = {
    /**
     * Invalid input data
     */
    400: ErrorResponseDto;
};

export type AuthControllerForgotPasswordError = AuthControllerForgotPasswordErrors[keyof AuthControllerForgotPasswordErrors];

export type AuthControllerForgotPasswordResponses = {
    /**
     * Password reset email sent (if email exists)
     */
    200: SuccessResponseDto;
};

export type AuthControllerForgotPasswordResponse = AuthControllerForgotPasswordResponses[keyof AuthControllerForgotPasswordResponses];

export type AuthControllerResetPasswordData = {
    /**
     * Reset token and new password
     */
    body: ResetPasswordDto;
    path?: never;
    query?: never;
    url: '/auth/reset-password';
};

export type AuthControllerResetPasswordErrors = {
    /**
     * Invalid or expired reset token
     */
    400: ErrorResponseDto;
};

export type AuthControllerResetPasswordError = AuthControllerResetPasswordErrors[keyof AuthControllerResetPasswordErrors];

export type AuthControllerResetPasswordResponses = {
    /**
     * Password reset successfully
     */
    200: SuccessResponseDto;
};

export type AuthControllerResetPasswordResponse = AuthControllerResetPasswordResponses[keyof AuthControllerResetPasswordResponses];

export type AuthControllerRequestEmailVerificationData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/request-email-verification';
};

export type AuthControllerRequestEmailVerificationResponses = {
    /**
     * Email verication sent.
     */
    200: SuccessResponseDto;
};

export type AuthControllerRequestEmailVerificationResponse = AuthControllerRequestEmailVerificationResponses[keyof AuthControllerRequestEmailVerificationResponses];

export type AuthControllerVerifyEmailData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Email verification token
         */
        token: string;
    };
    url: '/auth/verify-email';
};

export type AuthControllerVerifyEmailErrors = {
    /**
     * Invalid or expired verification token
     */
    400: ErrorResponseDto;
};

export type AuthControllerVerifyEmailError = AuthControllerVerifyEmailErrors[keyof AuthControllerVerifyEmailErrors];

export type AuthControllerVerifyEmailResponses = {
    /**
     * Email verified successfully
     */
    200: SuccessResponseDto;
};

export type AuthControllerVerifyEmailResponse = AuthControllerVerifyEmailResponses[keyof AuthControllerVerifyEmailResponses];

export type AuthControllerCheckUserData = {
    body?: never;
    path?: never;
    query: {
        fieldType: string;
        fieldValue: string;
    };
    url: '/auth/check-user';
};

export type AuthControllerCheckUserErrors = {
    /**
     * User already exists
     */
    409: unknown;
};

export type AuthControllerCheckUserResponses = {
    /**
     * User exists.
     */
    200: unknown;
};

export type AuthControllerDeleteUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/me';
};

export type AuthControllerDeleteUserResponses = {
    /**
     * User account deleted successfully
     */
    200: SuccessResponseDto;
};

export type AuthControllerDeleteUserResponse = AuthControllerDeleteUserResponses[keyof AuthControllerDeleteUserResponses];

export type AuthControllerGetProfileData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/me';
};

export type AuthControllerGetProfileErrors = {
    /**
     * Invalid or missing token
     */
    401: ErrorResponseDto;
};

export type AuthControllerGetProfileError = AuthControllerGetProfileErrors[keyof AuthControllerGetProfileErrors];

export type AuthControllerGetProfileResponses = {
    /**
     * User profile retrieved successfully
     */
    200: SuccessResponseDto;
};

export type AuthControllerGetProfileResponse = AuthControllerGetProfileResponses[keyof AuthControllerGetProfileResponses];

export type AuthControllerUpdateProfileData = {
    /**
     * Profile update data
     */
    body: UpdateProfileDto;
    path?: never;
    query?: never;
    url: '/auth/me';
};

export type AuthControllerUpdateProfileErrors = {
    /**
     * Invalid or missing token
     */
    401: ErrorResponseDto;
    /**
     * Email already exists
     */
    409: ErrorResponseDto;
};

export type AuthControllerUpdateProfileError = AuthControllerUpdateProfileErrors[keyof AuthControllerUpdateProfileErrors];

export type AuthControllerUpdateProfileResponses = {
    /**
     * Profile updated successfully
     */
    200: SuccessResponseDto;
};

export type AuthControllerUpdateProfileResponse = AuthControllerUpdateProfileResponses[keyof AuthControllerUpdateProfileResponses];

export type AuthControllerChangePasswordData = {
    /**
     * Current and new password
     */
    body: ChangePasswordDto;
    path?: never;
    query?: never;
    url: '/auth/change-password';
};

export type AuthControllerChangePasswordErrors = {
    /**
     * Invalid or missing token / Current password incorrect
     */
    401: ErrorResponseDto;
};

export type AuthControllerChangePasswordError = AuthControllerChangePasswordErrors[keyof AuthControllerChangePasswordErrors];

export type AuthControllerChangePasswordResponses = {
    /**
     * Password changed successfully
     */
    200: SuccessResponseDto;
};

export type AuthControllerChangePasswordResponse = AuthControllerChangePasswordResponses[keyof AuthControllerChangePasswordResponses];

export type AuthControllerLogoutData = {
    /**
     * Optional refresh token to revoke
     */
    body?: {
        refresh_token?: string;
    };
    path?: never;
    query?: never;
    url: '/auth/logout';
};

export type AuthControllerLogoutErrors = {
    /**
     * Invalid or missing token
     */
    401: ErrorResponseDto;
};

export type AuthControllerLogoutError = AuthControllerLogoutErrors[keyof AuthControllerLogoutErrors];

export type AuthControllerLogoutResponses = {
    /**
     * User successfully logged out
     */
    200: SuccessResponseDto;
};

export type AuthControllerLogoutResponse = AuthControllerLogoutResponses[keyof AuthControllerLogoutResponses];

export type AuthControllerVerifyTokenData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/verify-token';
};

export type AuthControllerVerifyTokenErrors = {
    /**
     * Invalid or expired token
     */
    401: ErrorResponseDto;
};

export type AuthControllerVerifyTokenError = AuthControllerVerifyTokenErrors[keyof AuthControllerVerifyTokenErrors];

export type AuthControllerVerifyTokenResponses = {
    /**
     * Token is valid
     */
    200: {
        valid?: boolean;
        user?: UserResponseDto;
    };
};

export type AuthControllerVerifyTokenResponse = AuthControllerVerifyTokenResponses[keyof AuthControllerVerifyTokenResponses];

export type AuthControllerGetProfileLegacyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/profile';
};

export type AuthControllerGetProfileLegacyErrors = {
    /**
     * Invalid or missing token
     */
    401: ErrorResponseDto;
};

export type AuthControllerGetProfileLegacyError = AuthControllerGetProfileLegacyErrors[keyof AuthControllerGetProfileLegacyErrors];

export type AuthControllerGetProfileLegacyResponses = {
    /**
     * User profile retrieved successfully
     */
    200: UserResponseDto;
};

export type AuthControllerGetProfileLegacyResponse = AuthControllerGetProfileLegacyResponses[keyof AuthControllerGetProfileLegacyResponses];

export type PupilsControllerGetPupilProfileData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/pupils/me';
};

export type PupilsControllerGetPupilProfileErrors = {
    /**
     * Invalid credentials
     */
    401: ErrorResponseDto;
};

export type PupilsControllerGetPupilProfileError = PupilsControllerGetPupilProfileErrors[keyof PupilsControllerGetPupilProfileErrors];

export type PupilsControllerGetPupilProfileResponses = {
    /**
     * Pupil profile successfully fetched
     */
    201: SuccessResponseDto;
};

export type PupilsControllerGetPupilProfileResponse = PupilsControllerGetPupilProfileResponses[keyof PupilsControllerGetPupilProfileResponses];

export type PupilsControllerUpdatePupilProfileData = {
    /**
     * Pupil profile update data
     */
    body: UpdatePupilProfileDto;
    path?: never;
    query?: never;
    url: '/pupils/me';
};

export type PupilsControllerUpdatePupilProfileErrors = {
    /**
     * Invalid credentials
     */
    401: ErrorResponseDto;
};

export type PupilsControllerUpdatePupilProfileError = PupilsControllerUpdatePupilProfileErrors[keyof PupilsControllerUpdatePupilProfileErrors];

export type PupilsControllerUpdatePupilProfileResponses = {
    /**
     * Pupil profile successfully updated
     */
    200: SuccessResponseDto;
};

export type PupilsControllerUpdatePupilProfileResponse = PupilsControllerUpdatePupilProfileResponses[keyof PupilsControllerUpdatePupilProfileResponses];

export type PupilsControllerGetPupilByUsernameData = {
    body?: never;
    path: {
        username: string;
    };
    query?: never;
    url: '/pupils/{username}';
};

export type PupilsControllerGetPupilByUsernameErrors = {
    /**
     * Invalid credentials
     */
    401: ErrorResponseDto;
};

export type PupilsControllerGetPupilByUsernameError = PupilsControllerGetPupilByUsernameErrors[keyof PupilsControllerGetPupilByUsernameErrors];

export type PupilsControllerGetPupilByUsernameResponses = {
    /**
     * Pupil profile successfully fetched
     */
    201: SuccessResponseDto;
};

export type PupilsControllerGetPupilByUsernameResponse = PupilsControllerGetPupilByUsernameResponses[keyof PupilsControllerGetPupilByUsernameResponses];

export type PupilsControllerGetGlobalPupilLeaderboardData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/pupils/leaderboard';
};

export type PupilsControllerGetGlobalPupilLeaderboardErrors = {
    /**
     * Invalid credentials
     */
    401: ErrorResponseDto;
};

export type PupilsControllerGetGlobalPupilLeaderboardError = PupilsControllerGetGlobalPupilLeaderboardErrors[keyof PupilsControllerGetGlobalPupilLeaderboardErrors];

export type PupilsControllerGetGlobalPupilLeaderboardResponses = {
    /**
     * Global pupil leaderboard successfully fetched
     */
    201: SuccessResponseDto;
};

export type PupilsControllerGetGlobalPupilLeaderboardResponse = PupilsControllerGetGlobalPupilLeaderboardResponses[keyof PupilsControllerGetGlobalPupilLeaderboardResponses];

export type PupilsControllerGetPupilLeaderBoardByPupilIdData = {
    body?: never;
    path: {
        pupilId: string;
    };
    query?: never;
    url: '/pupils/leaderboard/{pupilId}';
};

export type PupilsControllerGetPupilLeaderBoardByPupilIdErrors = {
    /**
     * Invalid credentials
     */
    401: ErrorResponseDto;
};

export type PupilsControllerGetPupilLeaderBoardByPupilIdError = PupilsControllerGetPupilLeaderBoardByPupilIdErrors[keyof PupilsControllerGetPupilLeaderBoardByPupilIdErrors];

export type PupilsControllerGetPupilLeaderBoardByPupilIdResponses = {
    /**
     * Pupil leaderboard successfully fetched
     */
    201: SuccessResponseDto;
};

export type PupilsControllerGetPupilLeaderBoardByPupilIdResponse = PupilsControllerGetPupilLeaderBoardByPupilIdResponses[keyof PupilsControllerGetPupilLeaderBoardByPupilIdResponses];

export type ClassroomsControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/classrooms';
};

export type ClassroomsControllerFindAllResponses = {
    /**
     * Classrooms fetched successfully
     */
    200: SuccessResponseDto;
};

export type ClassroomsControllerFindAllResponse = ClassroomsControllerFindAllResponses[keyof ClassroomsControllerFindAllResponses];

export type ClassroomsControllerCreateData = {
    body: CreateClassroomDto;
    path?: never;
    query?: never;
    url: '/classrooms';
};

export type ClassroomsControllerCreateResponses = {
    /**
     * Classroom created successfully
     */
    201: SuccessResponseDto;
};

export type ClassroomsControllerCreateResponse = ClassroomsControllerCreateResponses[keyof ClassroomsControllerCreateResponses];

export type ClassroomsControllerEnrollData = {
    body: EnrollPupilDto;
    path?: never;
    query?: never;
    url: '/classrooms/enroll';
};

export type ClassroomsControllerEnrollResponses = {
    /**
     * Pupils enrolled successfully
     */
    201: SuccessResponseDto;
};

export type ClassroomsControllerEnrollResponse = ClassroomsControllerEnrollResponses[keyof ClassroomsControllerEnrollResponses];

export type ClassroomsControllerUnEnrollData = {
    body: UnEnrollPupilDto;
    path?: never;
    query?: never;
    url: '/classrooms/unenroll';
};

export type ClassroomsControllerUnEnrollResponses = {
    /**
     * Pupils unenrolled successfully
     */
    200: SuccessResponseDto;
};

export type ClassroomsControllerUnEnrollResponse = ClassroomsControllerUnEnrollResponses[keyof ClassroomsControllerUnEnrollResponses];

export type ClassroomsControllerJoinData = {
    body: JoinClassroomDto;
    path?: never;
    query?: never;
    url: '/classrooms/join';
};

export type ClassroomsControllerJoinResponses = {
    201: unknown;
};

export type ClassroomsControllerLeaveData = {
    body: LeaveClassroomDto;
    path?: never;
    query?: never;
    url: '/classrooms/leave';
};

export type ClassroomsControllerLeaveResponses = {
    /**
     * Left classroom successfully
     */
    200: SuccessResponseDto;
};

export type ClassroomsControllerLeaveResponse = ClassroomsControllerLeaveResponses[keyof ClassroomsControllerLeaveResponses];

export type ClassroomsControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/classrooms/{id}';
};

export type ClassroomsControllerRemoveResponses = {
    /**
     * Classroom deleted successfully
     */
    200: SuccessResponseDto;
};

export type ClassroomsControllerRemoveResponse = ClassroomsControllerRemoveResponses[keyof ClassroomsControllerRemoveResponses];

export type ClassroomsControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/classrooms/{id}';
};

export type ClassroomsControllerFindOneResponses = {
    /**
     * Classroom fetched successfully
     */
    200: SuccessResponseDto;
};

export type ClassroomsControllerFindOneResponse = ClassroomsControllerFindOneResponses[keyof ClassroomsControllerFindOneResponses];

export type ClassroomsControllerUpdateData = {
    body: UpdateClassroomDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/classrooms/{id}';
};

export type ClassroomsControllerUpdateResponses = {
    /**
     * Classroom updated successfully
     */
    200: SuccessResponseDto;
};

export type ClassroomsControllerUpdateResponse = ClassroomsControllerUpdateResponses[keyof ClassroomsControllerUpdateResponses];

export type MinigamesControllerCreateWflMinigameData = {
    body: CreateWordsFromLettersGame;
    path?: never;
    query?: never;
    url: '/minigames/wordsFromLetters';
};

export type MinigamesControllerCreateWflMinigameResponses = {
    /**
     * Words From Letters minigame created successfully
     */
    201: SuccessResponseDto;
};

export type MinigamesControllerCreateWflMinigameResponse = MinigamesControllerCreateWflMinigameResponses[keyof MinigamesControllerCreateWflMinigameResponses];

export type MinigamesControllerCreateChoicesMinigameData = {
    body: CreateChoicesGame;
    path?: never;
    query?: never;
    url: '/minigames/choices';
};

export type MinigamesControllerCreateChoicesMinigameResponses = {
    /**
     * Choices minigame created successfully
     */
    201: SuccessResponseDto;
};

export type MinigamesControllerCreateChoicesMinigameResponse = MinigamesControllerCreateChoicesMinigameResponses[keyof MinigamesControllerCreateChoicesMinigameResponses];

export type MinigamesControllerCreateSrMinigameData = {
    body: CreateSentenceRearrangementGame;
    path?: never;
    query?: never;
    url: '/minigames/sentenceRearrangement';
};

export type MinigamesControllerCreateSrMinigameResponses = {
    /**
     * Sentence Rearrangement minigame created successfully
     */
    201: SuccessResponseDto;
};

export type MinigamesControllerCreateSrMinigameResponse = MinigamesControllerCreateSrMinigameResponses[keyof MinigamesControllerCreateSrMinigameResponses];

export type MinigamesControllerFindMinigamesByMaterialIdData = {
    body?: never;
    path: {
        readingMaterialID: string;
    };
    query?: never;
    url: '/minigames/readingmaterials/{readingMaterialID}/random';
};

export type MinigamesControllerFindMinigamesByMaterialIdResponses = {
    /**
     * Random minigames fetched successfully
     */
    200: SuccessResponseDto;
};

export type MinigamesControllerFindMinigamesByMaterialIdResponse = MinigamesControllerFindMinigamesByMaterialIdResponses[keyof MinigamesControllerFindMinigamesByMaterialIdResponses];

export type MinigamesControllerFindMinigamelogsByReadingSessionIdData = {
    body?: never;
    path: {
        readingSessionID: string;
    };
    query?: never;
    url: '/minigames/logs/{readingSessionID}';
};

export type MinigamesControllerFindMinigamelogsByReadingSessionIdResponses = {
    /**
     * Minigame logs successfully fetched.
     */
    200: SuccessResponseDto;
};

export type MinigamesControllerFindMinigamelogsByReadingSessionIdResponse = MinigamesControllerFindMinigamelogsByReadingSessionIdResponses[keyof MinigamesControllerFindMinigamelogsByReadingSessionIdResponses];

export type MinigamesControllerUpdateSentenceRearrangementLogData = {
    body: UpdateMinigameLogDto;
    path?: never;
    query?: never;
    url: '/minigames/logs/SentenceRearrangement';
};

export type MinigamesControllerUpdateSentenceRearrangementLogResponses = {
    /**
     * Sentence Rearrangement Log updated successfully.
     */
    200: SuccessResponseDto;
};

export type MinigamesControllerUpdateSentenceRearrangementLogResponse = MinigamesControllerUpdateSentenceRearrangementLogResponses[keyof MinigamesControllerUpdateSentenceRearrangementLogResponses];

export type MinigamesControllerCreateSentenceRearrangementLogData = {
    body: CreateMinigameLogDto;
    path?: never;
    query?: never;
    url: '/minigames/logs/SentenceRearrangement';
};

export type MinigamesControllerCreateSentenceRearrangementLogResponses = {
    /**
     * Sentence Rearrangement Log created successfully
     */
    201: SuccessResponseDto;
};

export type MinigamesControllerCreateSentenceRearrangementLogResponse = MinigamesControllerCreateSentenceRearrangementLogResponses[keyof MinigamesControllerCreateSentenceRearrangementLogResponses];

export type MinigamesControllerUpdateChoicesLogData = {
    body: UpdateMinigameLogDto;
    path?: never;
    query?: never;
    url: '/minigames/logs/Choices';
};

export type MinigamesControllerUpdateChoicesLogResponses = {
    /**
     * Choices Log updated successfully.
     */
    200: SuccessResponseDto;
};

export type MinigamesControllerUpdateChoicesLogResponse = MinigamesControllerUpdateChoicesLogResponses[keyof MinigamesControllerUpdateChoicesLogResponses];

export type MinigamesControllerCreateChoicesLogData = {
    body: CreateMinigameLogDto;
    path?: never;
    query?: never;
    url: '/minigames/logs/Choices';
};

export type MinigamesControllerCreateChoicesLogResponses = {
    /**
     * Choices log created successfully
     */
    201: SuccessResponseDto;
};

export type MinigamesControllerCreateChoicesLogResponse = MinigamesControllerCreateChoicesLogResponses[keyof MinigamesControllerCreateChoicesLogResponses];

export type MinigamesControllerUpdateWordsFromLettersLogData = {
    body: UpdateMinigameLogDto;
    path?: never;
    query?: never;
    url: '/minigames/logs/WordsFromLetters';
};

export type MinigamesControllerUpdateWordsFromLettersLogResponses = {
    /**
     * WordsFromLetters Log updated successfully.
     */
    200: SuccessResponseDto;
};

export type MinigamesControllerUpdateWordsFromLettersLogResponse = MinigamesControllerUpdateWordsFromLettersLogResponses[keyof MinigamesControllerUpdateWordsFromLettersLogResponses];

export type MinigamesControllerCreateWordsFromLettersLogData = {
    body: CreateMinigameLogDto;
    path?: never;
    query?: never;
    url: '/minigames/logs/WordsFromLetters';
};

export type MinigamesControllerCreateWordsFromLettersLogResponses = {
    /**
     * Words From Letters log created successfully
     */
    201: SuccessResponseDto;
};

export type MinigamesControllerCreateWordsFromLettersLogResponse = MinigamesControllerCreateWordsFromLettersLogResponses[keyof MinigamesControllerCreateWordsFromLettersLogResponses];

export type MinigamesControllerFindMinigamesBySessionIdData = {
    body?: never;
    path: {
        readingSessionID: string;
    };
    query?: never;
    url: '/minigames/sessions/{readingSessionID}';
};

export type MinigamesControllerFindMinigamesBySessionIdResponses = {
    /**
     * Minigames fetched successfully
     */
    200: SuccessResponseDto;
};

export type MinigamesControllerFindMinigamesBySessionIdResponse = MinigamesControllerFindMinigamesBySessionIdResponses[keyof MinigamesControllerFindMinigamesBySessionIdResponses];

export type MinigamesControllerFindRandomMinigamesBySessionIdData = {
    body?: never;
    path: {
        readingSessionID: string;
    };
    query?: never;
    url: '/minigames/{readingSessionID}/random';
};

export type MinigamesControllerFindRandomMinigamesBySessionIdResponses = {
    /**
     * Minigames fetched successfully
     */
    200: SuccessResponseDto;
};

export type MinigamesControllerFindRandomMinigamesBySessionIdResponse = MinigamesControllerFindRandomMinigamesBySessionIdResponses[keyof MinigamesControllerFindRandomMinigamesBySessionIdResponses];

export type MinigamesControllerFindWordsFromLettersMinigameData = {
    body?: never;
    path: {
        readingMaterialID: string;
    };
    query?: never;
    url: '/minigames/{readingMaterialID}/wordsFromLetters';
};

export type MinigamesControllerFindWordsFromLettersMinigameResponses = {
    /**
     * Words from Letters minigame fetched successfully
     */
    200: SuccessResponseDto;
};

export type MinigamesControllerFindWordsFromLettersMinigameResponse = MinigamesControllerFindWordsFromLettersMinigameResponses[keyof MinigamesControllerFindWordsFromLettersMinigameResponses];

export type MinigamesControllerGetMinigamesCompletionData = {
    body?: never;
    path: {
        readingSessionID: string;
    };
    query?: never;
    url: '/minigames/{readingSessionID}/complete';
};

export type MinigamesControllerGetMinigamesCompletionResponses = {
    /**
     * Reading session completed successfully
     */
    201: SuccessResponseDto;
};

export type MinigamesControllerGetMinigamesCompletionResponse = MinigamesControllerGetMinigamesCompletionResponses[keyof MinigamesControllerGetMinigamesCompletionResponses];

export type ReadingSessionsControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/reading-sessions';
};

export type ReadingSessionsControllerFindAllResponses = {
    /**
     * Reading sessions fetched successfully
     */
    200: SuccessResponseDto;
};

export type ReadingSessionsControllerFindAllResponse = ReadingSessionsControllerFindAllResponses[keyof ReadingSessionsControllerFindAllResponses];

export type ReadingSessionsControllerCreateData = {
    body: CreateReadingSessionDto;
    path?: never;
    query?: never;
    url: '/reading-sessions';
};

export type ReadingSessionsControllerCreateResponses = {
    /**
     * Reading session created successfully
     */
    201: SuccessResponseDto;
};

export type ReadingSessionsControllerCreateResponse = ReadingSessionsControllerCreateResponses[keyof ReadingSessionsControllerCreateResponses];

export type ReadingSessionsControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/reading-sessions/{id}';
};

export type ReadingSessionsControllerRemoveResponses = {
    /**
     * Reading session deleted successfully
     */
    200: SuccessResponseDto;
};

export type ReadingSessionsControllerRemoveResponse = ReadingSessionsControllerRemoveResponses[keyof ReadingSessionsControllerRemoveResponses];

export type ReadingSessionsControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/reading-sessions/{id}';
};

export type ReadingSessionsControllerFindOneResponses = {
    /**
     * Reading session fetched successfully
     */
    200: SuccessResponseDto;
};

export type ReadingSessionsControllerFindOneResponse = ReadingSessionsControllerFindOneResponses[keyof ReadingSessionsControllerFindOneResponses];

export type ReadingSessionsControllerUpdateData = {
    body: UpdateReadingSessionDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/reading-sessions/{id}';
};

export type ReadingSessionsControllerUpdateResponses = {
    /**
     * Reading session updated successfully
     */
    200: SuccessResponseDto;
};

export type ReadingSessionsControllerUpdateResponse = ReadingSessionsControllerUpdateResponses[keyof ReadingSessionsControllerUpdateResponses];

export type ReadingMaterialsControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/reading-materials';
};

export type ReadingMaterialsControllerFindAllResponses = {
    /**
     * Reading materials fetched successfully
     */
    200: SuccessResponseDto;
};

export type ReadingMaterialsControllerFindAllResponse = ReadingMaterialsControllerFindAllResponses[keyof ReadingMaterialsControllerFindAllResponses];

export type ReadingMaterialsControllerCreateData = {
    body: CreateReadingMaterialDto;
    path?: never;
    query?: never;
    url: '/reading-materials';
};

export type ReadingMaterialsControllerCreateResponses = {
    /**
     * Reading material created successfully
     */
    201: SuccessResponseDto;
};

export type ReadingMaterialsControllerCreateResponse = ReadingMaterialsControllerCreateResponses[keyof ReadingMaterialsControllerCreateResponses];

export type ReadingMaterialsControllerFindRecommendationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/reading-materials/recommendations';
};

export type ReadingMaterialsControllerFindRecommendationsResponses = {
    /**
     * Recommended reading materials fetched successfully
     */
    200: SuccessResponseDto;
};

export type ReadingMaterialsControllerFindRecommendationsResponse = ReadingMaterialsControllerFindRecommendationsResponses[keyof ReadingMaterialsControllerFindRecommendationsResponses];

export type ReadingMaterialsControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/reading-materials/{id}';
};

export type ReadingMaterialsControllerFindOneResponses = {
    /**
     * Reading material fetched successfully
     */
    200: SuccessResponseDto;
};

export type ReadingMaterialsControllerFindOneResponse = ReadingMaterialsControllerFindOneResponses[keyof ReadingMaterialsControllerFindOneResponses];

export type GenresControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/genres';
};

export type GenresControllerFindAllResponses = {
    /**
     * Genres fetched successfully
     */
    200: SuccessResponseDto;
};

export type GenresControllerFindAllResponse = GenresControllerFindAllResponses[keyof GenresControllerFindAllResponses];

export type GenresControllerCreateData = {
    body: CreateGenreDto;
    path?: never;
    query?: never;
    url: '/genres';
};

export type GenresControllerCreateResponses = {
    /**
     * Genre created successfully
     */
    201: SuccessResponseDto;
};

export type GenresControllerCreateResponse = GenresControllerCreateResponses[keyof GenresControllerCreateResponses];

export type AchievementsControllerGetPupilAchievementsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/achievements';
};

export type AchievementsControllerGetPupilAchievementsResponses = {
    /**
     * Pupil achievements fetched successfully
     */
    200: SuccessResponseDto;
};

export type AchievementsControllerGetPupilAchievementsResponse = AchievementsControllerGetPupilAchievementsResponses[keyof AchievementsControllerGetPupilAchievementsResponses];

export type AchievementsControllerAddPupilAchievementData = {
    body?: never;
    path: {
        pupilId: string;
        achievementName: string;
    };
    query?: never;
    url: '/achievements/pupil/{pupilId}/achievement/{achievementName}';
};

export type AchievementsControllerAddPupilAchievementResponses = {
    /**
     * Pupil achievement added successfully
     */
    201: SuccessResponseDto;
};

export type AchievementsControllerAddPupilAchievementResponse = AchievementsControllerAddPupilAchievementResponses[keyof AchievementsControllerAddPupilAchievementResponses];

export type AchievementsControllerGetPupilAchievementsByIdData = {
    body?: never;
    path: {
        pupilId: string;
    };
    query?: never;
    url: '/achievements/pupils/{pupilId}';
};

export type AchievementsControllerGetPupilAchievementsByIdResponses = {
    /**
     * Pupil achievements fetched successfully
     */
    200: SuccessResponseDto;
};

export type AchievementsControllerGetPupilAchievementsByIdResponse = AchievementsControllerGetPupilAchievementsByIdResponses[keyof AchievementsControllerGetPupilAchievementsByIdResponses];

export type AchievementsControllerRemovePupilAchievementData = {
    body?: never;
    path: {
        pupilId: string;
        achievementId: string;
    };
    query?: never;
    url: '/achievements/pupils/{pupilId}/achievements/{achievementId}';
};

export type AchievementsControllerRemovePupilAchievementResponses = {
    /**
     * Achievement removed from pupil successfully
     */
    200: SuccessResponseDto;
};

export type AchievementsControllerRemovePupilAchievementResponse = AchievementsControllerRemovePupilAchievementResponses[keyof AchievementsControllerRemovePupilAchievementResponses];

export type AchievementsControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/achievements/{id}';
};

export type AchievementsControllerRemoveResponses = {
    /**
     * Achievement deleted successfully
     */
    200: SuccessResponseDto;
};

export type AchievementsControllerRemoveResponse = AchievementsControllerRemoveResponses[keyof AchievementsControllerRemoveResponses];

export type ActivityControllerFindAllByClassroomIdData = {
    body?: never;
    path: {
        classroomId: string;
    };
    query?: never;
    url: '/classrooms/{classroomId}/activity';
};

export type ActivityControllerFindAllByClassroomIdResponses = {
    /**
     * Activities of classroom fetched successfully
     */
    200: SuccessResponseDto;
};

export type ActivityControllerFindAllByClassroomIdResponse = ActivityControllerFindAllByClassroomIdResponses[keyof ActivityControllerFindAllByClassroomIdResponses];

export type ActivityControllerCreateData = {
    body: CreateActivityDto;
    path: {
        classroomId: string;
    };
    query?: never;
    url: '/classrooms/{classroomId}/activity';
};

export type ActivityControllerCreateResponses = {
    /**
     * Activity created successfully
     */
    201: SuccessResponseDto;
};

export type ActivityControllerCreateResponse = ActivityControllerCreateResponses[keyof ActivityControllerCreateResponses];

export type ActivityControllerRemoveData = {
    body?: never;
    path: {
        classroomId: string;
        activityId: string;
    };
    query?: never;
    url: '/classrooms/{classroomId}/activity/{activityId}';
};

export type ActivityControllerRemoveResponses = {
    /**
     * Activity deleted successfully
     */
    200: SuccessResponseDto;
};

export type ActivityControllerRemoveResponse = ActivityControllerRemoveResponses[keyof ActivityControllerRemoveResponses];

export type ActivityControllerFindOneData = {
    body?: never;
    path: {
        classroomId: string;
        activityId: string;
    };
    query?: never;
    url: '/classrooms/{classroomId}/activity/{activityId}';
};

export type ActivityControllerFindOneResponses = {
    /**
     * Activity fetched successfully
     */
    200: SuccessResponseDto;
};

export type ActivityControllerFindOneResponse = ActivityControllerFindOneResponses[keyof ActivityControllerFindOneResponses];

export type ActivityControllerUpdateData = {
    body: UpdateActivityDto;
    path: {
        classroomId: string;
        activityId: string;
    };
    query?: never;
    url: '/classrooms/{classroomId}/activity/{activityId}';
};

export type ActivityControllerUpdateResponses = {
    /**
     * Activity updated successfully
     */
    200: SuccessResponseDto;
};

export type ActivityControllerUpdateResponse = ActivityControllerUpdateResponses[keyof ActivityControllerUpdateResponses];

export type UserControllerGetLoginStreakData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/me/streak';
};

export type UserControllerGetLoginStreakResponses = {
    /**
     * Login streak fetched successfully
     */
    200: SuccessResponseDto;
};

export type UserControllerGetLoginStreakResponse = UserControllerGetLoginStreakResponses[keyof UserControllerGetLoginStreakResponses];

export type UserControllerUpdateLoginStreakData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/me/streak';
};

export type UserControllerUpdateLoginStreakResponses = {
    /**
     * Login streak updated successfully
     */
    200: SuccessResponseDto;
};

export type UserControllerUpdateLoginStreakResponse = UserControllerUpdateLoginStreakResponses[keyof UserControllerUpdateLoginStreakResponses];

export type UserControllerGetTotalSessionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/me/sessions';
};

export type UserControllerGetTotalSessionsResponses = {
    /**
     * Total sessions fetched successfully
     */
    200: SuccessResponseDto;
};

export type UserControllerGetTotalSessionsResponse = UserControllerGetTotalSessionsResponses[keyof UserControllerGetTotalSessionsResponses];

export type UserControllerCreateSessionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/me/sessions';
};

export type UserControllerCreateSessionResponses = {
    /**
     * Session created successfully
     */
    201: SuccessResponseDto;
};

export type UserControllerCreateSessionResponse = UserControllerCreateSessionResponses[keyof UserControllerCreateSessionResponses];

export type UserControllerEndSessionData = {
    body?: never;
    path: {
        sessionId: string;
    };
    query?: never;
    url: '/user/me/sessions/{sessionId}';
};

export type UserControllerEndSessionResponses = {
    /**
     * Session ended successfully
     */
    200: SuccessResponseDto;
};

export type UserControllerEndSessionResponse = UserControllerEndSessionResponses[keyof UserControllerEndSessionResponses];

export type UserControllerSearchUsersData = {
    body?: never;
    path?: never;
    query: {
        query: string;
        role: string;
    };
    url: '/user/search';
};

export type UserControllerSearchUsersResponses = {
    /**
     * Users fetched successfully
     */
    200: SuccessResponseDto;
};

export type UserControllerSearchUsersResponse = UserControllerSearchUsersResponses[keyof UserControllerSearchUsersResponses];

export type ActivityLogsControllerFindOneData = {
    body?: never;
    path: {
        activityId: string;
    };
    query?: never;
    url: '/classroom/activity-logs/{activityId}';
};

export type ActivityLogsControllerFindOneResponses = {
    /**
     * Activity logs for activity fetched successfully
     */
    200: SuccessResponseDto;
};

export type ActivityLogsControllerFindOneResponse = ActivityLogsControllerFindOneResponses[keyof ActivityLogsControllerFindOneResponses];

export type ActivityLogsControllerCreateData = {
    body: CreateActivityLogDto;
    path: {
        activityId: string;
    };
    query?: never;
    url: '/classroom/activity-logs/{activityId}';
};

export type ActivityLogsControllerCreateResponses = {
    /**
     * Activity Log created successfully
     */
    201: SuccessResponseDto;
};

export type ActivityLogsControllerCreateResponse = ActivityLogsControllerCreateResponses[keyof ActivityLogsControllerCreateResponses];

export type ActivityLogsControllerFindAllData = {
    body?: never;
    path: {
        activityId: string;
        classroomId: string;
    };
    query?: never;
    url: '/classroom/activity-logs/{activityId}/classroom/{classroomId}/activity-logs';
};

export type ActivityLogsControllerFindAllResponses = {
    /**
     * Activity logs for classroom fetched successfully
     */
    200: SuccessResponseDto;
};

export type ActivityLogsControllerFindAllResponse = ActivityLogsControllerFindAllResponses[keyof ActivityLogsControllerFindAllResponses];

export type DictionaryControllerDefinitionData = {
    body?: never;
    path: {
        word: string;
    };
    query?: never;
    url: '/dictionary/dictionary/{word}';
};

export type DictionaryControllerDefinitionResponses = {
    /**
     * Definition fetched successfully
     */
    200: SuccessResponseDto;
};

export type DictionaryControllerDefinitionResponse = DictionaryControllerDefinitionResponses[keyof DictionaryControllerDefinitionResponses];

export type ImagekitControllerUploadImageData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/upload/image';
};

export type ImagekitControllerUploadImageResponses = {
    /**
     * Image uploaded successfully
     */
    201: SuccessResponseDto;
};

export type ImagekitControllerUploadImageResponse = ImagekitControllerUploadImageResponses[keyof ImagekitControllerUploadImageResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:3000' | (string & {});
};
